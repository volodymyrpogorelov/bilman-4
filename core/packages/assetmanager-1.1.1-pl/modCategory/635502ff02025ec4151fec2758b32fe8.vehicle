<?php return array (
  'preserve_keys' => true,
  'update_object' => false,
  'unique_key' => 
  array (
    0 => 'category',
  ),
  'related_objects' => 
  array (
    'Snippets' => 
    array (
      '2f8bd8fce22f3e825a21f9fcd6a2eb4a' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":1,"source":0,"property_preprocess":0,"name":"Asset","description":"Returns a single asset","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * @name Asset\\n * @description Returns a single asset\\n *\\n *\\n * If no &height or &width arguments are passed, then no resizing takes place: return the full size of the original asset image.\\n * If the snippet call sets a &width but no &height, then return a scaled version of the asset scaled to the desired width.\\n * If the snippet call sets a &height but no &width, then return a scaled version of the asset scaled to the desired height.\\n * If both &height and &width are set, then do what the \\"scale\\" Snippet does and scale asset to the desired dimensions\\n * \\n * USAGE EXAMPLES\\n * [[Asset? &asset_id=`123` &tpl=`<img src=\\"[[+url]]\\"\\/>` &height=`100` &width=`100` ]]\\n * [[Asset? &asset_id=`123` &tpl=`<a href=\\"[[+url]]\\"><img src=\\"[[+thumbnail_url]]\\"\\/><\\/a>` &height=`100` &width=`100` ]]\\n *\\n * USAGE EXAMPLES FOR NON-IMAGE ASSETS\\n * Width and height params do not work on non-image assets, but a default thumbnail url will be generated.\\n * [[Asset? &asset_id=`123` &tpl=`<img src=\\"[[+thumbnail_url]]\\"\\/>` ]]\\n * [[Asset? &asset_id=`123` &tpl=`<a href=\\"[[+url]]\\"><img src=\\"[[+thumbnail_url]]\\"\\/><\\/a>` ]]\\n *\\n * Parameters\\n * -----------------------------\\n * @param integer &asset_id \\n * @param integer &width in pixels\\n * @param integer &height in pixels\\n * @param string &tpl either a MODX chunk or a formatting string\\n *\\n * Variables\\n * ---------\\n * @var $modx modX\\n * @var $scriptProperties array\\n *\\n * @package assman\\n *\\/\\n$core_path = $modx->getOption(\'assman.core_path\', null, MODX_CORE_PATH.\'components\\/assman\\/\');\\nrequire_once $core_path .\'vendor\\/autoload.php\';\\n$Snippet = new \\\\Assman\\\\Snippet($modx);\\n$Snippet->log(\'Asset\',$scriptProperties);\\n\\n\\n$asset_id = (int) $modx->getOption(\'asset_id\', $scriptProperties);\\n$width = (int) $modx->getOption(\'width\', $scriptProperties);\\n$height = (int) $modx->getOption(\'height\', $scriptProperties);\\n$tpl = $modx->getOption(\'tpl\', $scriptProperties, \'<img src=\\"[[+url]]\\" width=\\"[[+width]]\\" height=\\"[[+height]]\\" alt=\\"[[+alt]]\\" \\/>\');\\n\\n$Asset = $modx->getObject(\'Asset\', $asset_id);\\n\\nif(!$Asset) {\\n\\t$modx->log(\\\\modX::LOG_LEVEL_DEBUG, \\"No results found\\",\'\',\'Asset\',__LINE__);\\n\\treturn;\\n}\\n\\n\\n$ass_props = array(\\n\\t\'asset_id\'\\t=> $Asset->get(\'asset_id\'),\\n\\t\'title\'\\t=> $Asset->get(\'title\'),\\n\\t\'alt\'\\t=> $Asset->get(\'alt\'),\\n\\t\'width\'\\t=> $Asset->get(\'width\'),\\n\\t\'height\'\\t=> $Asset->get(\'height\'),\\n\\t\'thumbnail_url\'\\t=> $Asset->get(\'thumbnail_url\'),\\n\\t\'url\'\\t=> $Asset->get(\'url\')\\n);\\n\\nif($Asset->is_image) {\\n\\n\\tif( $width == 0 && $height > 0 ) {\\n\\t\\t\\/\\/ Calculate the new dimensions\\n\\t\\t$nx = floor($height * ( $Asset->get(\'width\') \\/ $Asset->get(\'height\') ));\\n\\t\\t$ny = $height;\\n\\t\\t$ass_props[\'url\'] = $Asset->getResizedImage($Asset->get(\'path\'), $asset_id,$nx,$ny);\\n\\t\\t$ass_props[\'width\'] = $nx;\\n\\t\\t$ass_props[\'height\'] = $ny;\\n\\t}\\n\\n\\tif( $height == 0 && $width > 0 ) {\\n\\t\\t\\/\\/ Calculate the new dimensions\\n\\t\\t$nx = $width;\\n\\t\\t$ny = floor($width * ($Asset->get(\'height\') \\/ $Asset->get(\'width\')));\\n\\t\\t$ass_props[\'url\'] = $Asset->getResizedImage($Asset->get(\'path\'), $asset_id,$nx,$ny);\\n\\t\\t$ass_props[\'width\'] = $nx;\\n\\t\\t$ass_props[\'height\'] = $ny;\\n\\t}\\n\\n\\tif( $height > 0 && $width > 0 ) {\\n\\t\\t$ass_props[\'url\'] = $Asset->getResizedImage($Asset->get(\'path\'), $asset_id,$width,$height);\\n\\t\\t$ass_props[\'width\'] = $width;\\n\\t\\t$ass_props[\'height\'] = $height;\\n\\t}\\n}\\n\\n\\/\\/ Create the temporary chunk\\n$uniqid = uniqid();\\n$chunk = $modx->newObject(\'modChunk\', array(\'name\' => \\"{tmp}-{$uniqid}\\"));\\n$chunk->setCacheable(false);\\n \\n$output = $chunk->process($ass_props, $tpl);\\n\\nreturn $output;","locked":0,"properties":null,"moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * @name Asset\\n * @description Returns a single asset\\n *\\n *\\n * If no &height or &width arguments are passed, then no resizing takes place: return the full size of the original asset image.\\n * If the snippet call sets a &width but no &height, then return a scaled version of the asset scaled to the desired width.\\n * If the snippet call sets a &height but no &width, then return a scaled version of the asset scaled to the desired height.\\n * If both &height and &width are set, then do what the \\"scale\\" Snippet does and scale asset to the desired dimensions\\n * \\n * USAGE EXAMPLES\\n * [[Asset? &asset_id=`123` &tpl=`<img src=\\"[[+url]]\\"\\/>` &height=`100` &width=`100` ]]\\n * [[Asset? &asset_id=`123` &tpl=`<a href=\\"[[+url]]\\"><img src=\\"[[+thumbnail_url]]\\"\\/><\\/a>` &height=`100` &width=`100` ]]\\n *\\n * USAGE EXAMPLES FOR NON-IMAGE ASSETS\\n * Width and height params do not work on non-image assets, but a default thumbnail url will be generated.\\n * [[Asset? &asset_id=`123` &tpl=`<img src=\\"[[+thumbnail_url]]\\"\\/>` ]]\\n * [[Asset? &asset_id=`123` &tpl=`<a href=\\"[[+url]]\\"><img src=\\"[[+thumbnail_url]]\\"\\/><\\/a>` ]]\\n *\\n * Parameters\\n * -----------------------------\\n * @param integer &asset_id \\n * @param integer &width in pixels\\n * @param integer &height in pixels\\n * @param string &tpl either a MODX chunk or a formatting string\\n *\\n * Variables\\n * ---------\\n * @var $modx modX\\n * @var $scriptProperties array\\n *\\n * @package assman\\n *\\/\\n$core_path = $modx->getOption(\'assman.core_path\', null, MODX_CORE_PATH.\'components\\/assman\\/\');\\nrequire_once $core_path .\'vendor\\/autoload.php\';\\n$Snippet = new \\\\Assman\\\\Snippet($modx);\\n$Snippet->log(\'Asset\',$scriptProperties);\\n\\n\\n$asset_id = (int) $modx->getOption(\'asset_id\', $scriptProperties);\\n$width = (int) $modx->getOption(\'width\', $scriptProperties);\\n$height = (int) $modx->getOption(\'height\', $scriptProperties);\\n$tpl = $modx->getOption(\'tpl\', $scriptProperties, \'<img src=\\"[[+url]]\\" width=\\"[[+width]]\\" height=\\"[[+height]]\\" alt=\\"[[+alt]]\\" \\/>\');\\n\\n$Asset = $modx->getObject(\'Asset\', $asset_id);\\n\\nif(!$Asset) {\\n\\t$modx->log(\\\\modX::LOG_LEVEL_DEBUG, \\"No results found\\",\'\',\'Asset\',__LINE__);\\n\\treturn;\\n}\\n\\n\\n$ass_props = array(\\n\\t\'asset_id\'\\t=> $Asset->get(\'asset_id\'),\\n\\t\'title\'\\t=> $Asset->get(\'title\'),\\n\\t\'alt\'\\t=> $Asset->get(\'alt\'),\\n\\t\'width\'\\t=> $Asset->get(\'width\'),\\n\\t\'height\'\\t=> $Asset->get(\'height\'),\\n\\t\'thumbnail_url\'\\t=> $Asset->get(\'thumbnail_url\'),\\n\\t\'url\'\\t=> $Asset->get(\'url\')\\n);\\n\\nif($Asset->is_image) {\\n\\n\\tif( $width == 0 && $height > 0 ) {\\n\\t\\t\\/\\/ Calculate the new dimensions\\n\\t\\t$nx = floor($height * ( $Asset->get(\'width\') \\/ $Asset->get(\'height\') ));\\n\\t\\t$ny = $height;\\n\\t\\t$ass_props[\'url\'] = $Asset->getResizedImage($Asset->get(\'path\'), $asset_id,$nx,$ny);\\n\\t\\t$ass_props[\'width\'] = $nx;\\n\\t\\t$ass_props[\'height\'] = $ny;\\n\\t}\\n\\n\\tif( $height == 0 && $width > 0 ) {\\n\\t\\t\\/\\/ Calculate the new dimensions\\n\\t\\t$nx = $width;\\n\\t\\t$ny = floor($width * ($Asset->get(\'height\') \\/ $Asset->get(\'width\')));\\n\\t\\t$ass_props[\'url\'] = $Asset->getResizedImage($Asset->get(\'path\'), $asset_id,$nx,$ny);\\n\\t\\t$ass_props[\'width\'] = $nx;\\n\\t\\t$ass_props[\'height\'] = $ny;\\n\\t}\\n\\n\\tif( $height > 0 && $width > 0 ) {\\n\\t\\t$ass_props[\'url\'] = $Asset->getResizedImage($Asset->get(\'path\'), $asset_id,$width,$height);\\n\\t\\t$ass_props[\'width\'] = $width;\\n\\t\\t$ass_props[\'height\'] = $height;\\n\\t}\\n}\\n\\n\\/\\/ Create the temporary chunk\\n$uniqid = uniqid();\\n$chunk = $modx->newObject(\'modChunk\', array(\'name\' => \\"{tmp}-{$uniqid}\\"));\\n$chunk->setCacheable(false);\\n \\n$output = $chunk->process($ass_props, $tpl);\\n\\nreturn $output;"}',
        'guid' => 'ae3b34922974ba9e1e05b9c4a468b249',
        'native_key' => 1,
        'signature' => '762bf9238564a8da1242099c0eb9ed11',
      ),
      '68cbf5b0ab01b2912cfcdf490e869591' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":2,"source":0,"property_preprocess":0,"name":"getPageAssets","description":"Returns a list of images or other assets for the given page","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * @name getPageAssets\\n * @description Returns a list of images or other assets for the given page\\n *\\n * \\n * USAGE EXAMPLES\\n *\\n * You can use the resize output filter to display different sizes. \\n *\\n *  [[getPageAssets? &innerTpl=`<li><img src=\\"[[+asset_id:resize=`300x500`]]\\" width=\\"300\\" height=\\"500\\" alt=\\"[[+Asset.alt]]\\" \\/><\\/li>`]]\\n *\\n * If using the \\"resize\\" output filter, you MUST call the snippet cached! Otherwise the \\"resize\\" filter attempts to operate on the placeholder\\n * before it\'s set!\\n *\\n * No results: use a MODX output filter:\\n *\\n *  [[getPageAssets:empty=`No images found`? ]]\\n \\n * Available Placeholders\\n * ---------------------------------------\\n * e.g. to format the original image: \\n *      <img src=\\"[[+Asset.url]]\\" width=\\"[[+Asset.width]]\\" height=\\"[[+Asset.height]]\\" alt=\\"[[+Asset.alt]]\\" \\/>\\n * or the standard Thumbnail:\\n *      <img src=\\"[[+Asset.thumbnail_url]]\\" width=\\"[[+Asset.thumbnail_width]]\\" height=\\"[[+Asset.thumbnail_height]]\\" alt=\\"[[+Asset.alt]]\\" \\/>\\n *\\n * If needed, include the System Settings (double ++) :\\n *      [[++assman.thumbnail_width]]\\n *      [[++assman.thumbnail_height]]\\n * e.g. <img src=\\"[[+Asset.thumbnail_url]]\\" width=\\"[[++assman.thumbnail_width]]\\" height=\\"[[++assman.thumbnail_width]]\\" alt=\\"[[+Asset.alt]]\\"\\/>\\n * \\n * \\n *\\n *\\n * Parameters\\n * -----------------------------\\n * @param integer $page_id of the page whose images you want. Defaults to the current page.\\n * @param string $outerTpl Format the Outer Wrapper of List (Optional)\\n * @param string $innerTpl Format the Inner Item of List\\n * @param string $firstTpl Format the first Item of List (optional : defaults to innerTpl)\\n * @param string $lastTpl Format the last Item of List (optional : defaults to innerTpl)\\n * @param string $onOne which tpl to use if there is only 1 result: innerTpl, firstTpl, or lastTpl. Default: innerTpl\\n * @param string $group optional: limit the results to the specified group\\n * @param boolean $is_active Get all active records only\\n * @param boolean $is_image if true, return only images, if false, only other assets. If not set, we get everything.\\n * @param int $limit Limit the records to be shown (if set to 0, all records will be pulled)\\n * @param string $sort which column should we sort by?  Default: Product.seq\\n * @param string $dir which direction should results be returned?  ASC or DESC (optional)\\n\\n *\\n * Variables\\n * ---------\\n * @var $modx modX\\n * @var $scriptProperties array\\n *\\n * Usage\\n * ------------------------------------------------------------\\n * To get all Images on certain page\\n * [[!getPageAssets? &page_id=`[[*id]]` &outerTpl=`sometpl` &innerTpl=`othertpl` &firstCLass=`first` &is_active=`1` &limit=`0`]]\\n * [[!getPageAssets? &page_id=`[[*id]]` &outerTpl=`sometpl` &innerTpl=`othertpl` &is_active=`1` &limit=`1`]]\\n *\\n * @package assman\\n *\\/\\n\\n$core_path = $modx->getOption(\'assman.core_path\', null, MODX_CORE_PATH.\'components\\/assman\\/\');\\nrequire_once $core_path .\'vendor\\/autoload.php\';\\n$Snippet = new \\\\Assman\\\\Snippet($modx);\\n$Snippet->log(\'getProductImages\',$scriptProperties);\\n\\n\\n\\/\\/ Formatting Arguments:\\n$innerTpl = $modx->getOption(\'innerTpl\', $scriptProperties, \'<li><img src=\\"[[+Asset.url]]\\" width=\\"[[+Asset.width]]\\" height=\\"[[+Asset.height]]\\" alt=\\"[[+Asset.alt]]\\" \\/><\\/li>\');\\n$outerTpl = $modx->getOption(\'outerTpl\', $scriptProperties, \'<ul>[[+content]]<\\/ul>\');\\n$firstTpl = $modx->getOption(\'firstTpl\', $scriptProperties, $innerTpl);\\n$lastTpl = $modx->getOption(\'lastTpl\', $scriptProperties, $innerTpl);\\n$onOne = $modx->getOption(\'onOne\', $scriptProperties, \'innerTpl\');\\n\\n$sort = $modx->getOption(\'sort\', $scriptProperties, \'PageAsset.seq\');\\n$dir = $modx->getOption(\'dir\', $scriptProperties);\\n\\n\\/\\/ Default Arguments:\\n$scriptProperties[\'is_active\'] = (bool) $modx->getOption(\'is_active\',$scriptProperties, 1);\\n$scriptProperties[\'limit\'] = (int) $modx->getOption(\'limit\',$scriptProperties, null);\\n$page_id = (int) $modx->getOption(\'page_id\',$scriptProperties);\\n\\n\\/\\/ Just being safe in case this is run without a resource in context\\nif (!$page_id) {\\n    if (isset($modx->resource) && is_object($modx->resource)) {\\n        $page_id = $modx->resource->get(\'id\');\\n    }\\n}\\n\\nif (!$page_id) {\\n    return \'Page ID is required.\';\\n}\\n\\n$criteria = array();\\n$criteria[\'page_id\'] = $page_id;\\n$criteria[\'PageAsset.is_active\'] = true;\\nif (isset($scriptProperties[\'is_image\'])) {\\n    $criteria[\'Asset.is_image\'] = (bool) $scriptProperties[\'is_image\'];\\n}\\nif (isset($scriptProperties[\'group\'])) {\\n    $criteria[\'PageAsset.group\'] = $scriptProperties[\'group\'];\\n}\\n\\n$c = $modx->newQuery(\'PageAsset\');\\n$c->where($criteria);\\nif ($sort && $dir) {\\n    $c->sortby($sort,$dir);\\n}\\nelseif($sort) {\\n    $c->sortby($sort);\\n}\\nif ($scriptProperties[\'limit\']) {\\n    $c->limit($scriptProperties[\'limit\']);\\n}\\n$cnt = $modx->getCount(\'PageAsset\',$c);\\n\\n$ProductAssets = $modx->getCollectionGraph(\'PageAsset\',\'{\\"Asset\\":{}}\', $c);\\n\\nif ($ProductAssets) {\\n    return $Snippet->format($ProductAssets,$innerTpl,$outerTpl,$firstTpl,$lastTpl,$onOne,$cnt);    \\n}\\n\\n$modx->log(\\\\modX::LOG_LEVEL_DEBUG, \\"No results found\\",\'\',\'getPageAssets\',__LINE__);\\n\\nreturn;","locked":0,"properties":null,"moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * @name getPageAssets\\n * @description Returns a list of images or other assets for the given page\\n *\\n * \\n * USAGE EXAMPLES\\n *\\n * You can use the resize output filter to display different sizes. \\n *\\n *  [[getPageAssets? &innerTpl=`<li><img src=\\"[[+asset_id:resize=`300x500`]]\\" width=\\"300\\" height=\\"500\\" alt=\\"[[+Asset.alt]]\\" \\/><\\/li>`]]\\n *\\n * If using the \\"resize\\" output filter, you MUST call the snippet cached! Otherwise the \\"resize\\" filter attempts to operate on the placeholder\\n * before it\'s set!\\n *\\n * No results: use a MODX output filter:\\n *\\n *  [[getPageAssets:empty=`No images found`? ]]\\n \\n * Available Placeholders\\n * ---------------------------------------\\n * e.g. to format the original image: \\n *      <img src=\\"[[+Asset.url]]\\" width=\\"[[+Asset.width]]\\" height=\\"[[+Asset.height]]\\" alt=\\"[[+Asset.alt]]\\" \\/>\\n * or the standard Thumbnail:\\n *      <img src=\\"[[+Asset.thumbnail_url]]\\" width=\\"[[+Asset.thumbnail_width]]\\" height=\\"[[+Asset.thumbnail_height]]\\" alt=\\"[[+Asset.alt]]\\" \\/>\\n *\\n * If needed, include the System Settings (double ++) :\\n *      [[++assman.thumbnail_width]]\\n *      [[++assman.thumbnail_height]]\\n * e.g. <img src=\\"[[+Asset.thumbnail_url]]\\" width=\\"[[++assman.thumbnail_width]]\\" height=\\"[[++assman.thumbnail_width]]\\" alt=\\"[[+Asset.alt]]\\"\\/>\\n * \\n * \\n *\\n *\\n * Parameters\\n * -----------------------------\\n * @param integer $page_id of the page whose images you want. Defaults to the current page.\\n * @param string $outerTpl Format the Outer Wrapper of List (Optional)\\n * @param string $innerTpl Format the Inner Item of List\\n * @param string $firstTpl Format the first Item of List (optional : defaults to innerTpl)\\n * @param string $lastTpl Format the last Item of List (optional : defaults to innerTpl)\\n * @param string $onOne which tpl to use if there is only 1 result: innerTpl, firstTpl, or lastTpl. Default: innerTpl\\n * @param string $group optional: limit the results to the specified group\\n * @param boolean $is_active Get all active records only\\n * @param boolean $is_image if true, return only images, if false, only other assets. If not set, we get everything.\\n * @param int $limit Limit the records to be shown (if set to 0, all records will be pulled)\\n * @param string $sort which column should we sort by?  Default: Product.seq\\n * @param string $dir which direction should results be returned?  ASC or DESC (optional)\\n\\n *\\n * Variables\\n * ---------\\n * @var $modx modX\\n * @var $scriptProperties array\\n *\\n * Usage\\n * ------------------------------------------------------------\\n * To get all Images on certain page\\n * [[!getPageAssets? &page_id=`[[*id]]` &outerTpl=`sometpl` &innerTpl=`othertpl` &firstCLass=`first` &is_active=`1` &limit=`0`]]\\n * [[!getPageAssets? &page_id=`[[*id]]` &outerTpl=`sometpl` &innerTpl=`othertpl` &is_active=`1` &limit=`1`]]\\n *\\n * @package assman\\n *\\/\\n\\n$core_path = $modx->getOption(\'assman.core_path\', null, MODX_CORE_PATH.\'components\\/assman\\/\');\\nrequire_once $core_path .\'vendor\\/autoload.php\';\\n$Snippet = new \\\\Assman\\\\Snippet($modx);\\n$Snippet->log(\'getProductImages\',$scriptProperties);\\n\\n\\n\\/\\/ Formatting Arguments:\\n$innerTpl = $modx->getOption(\'innerTpl\', $scriptProperties, \'<li><img src=\\"[[+Asset.url]]\\" width=\\"[[+Asset.width]]\\" height=\\"[[+Asset.height]]\\" alt=\\"[[+Asset.alt]]\\" \\/><\\/li>\');\\n$outerTpl = $modx->getOption(\'outerTpl\', $scriptProperties, \'<ul>[[+content]]<\\/ul>\');\\n$firstTpl = $modx->getOption(\'firstTpl\', $scriptProperties, $innerTpl);\\n$lastTpl = $modx->getOption(\'lastTpl\', $scriptProperties, $innerTpl);\\n$onOne = $modx->getOption(\'onOne\', $scriptProperties, \'innerTpl\');\\n\\n$sort = $modx->getOption(\'sort\', $scriptProperties, \'PageAsset.seq\');\\n$dir = $modx->getOption(\'dir\', $scriptProperties);\\n\\n\\/\\/ Default Arguments:\\n$scriptProperties[\'is_active\'] = (bool) $modx->getOption(\'is_active\',$scriptProperties, 1);\\n$scriptProperties[\'limit\'] = (int) $modx->getOption(\'limit\',$scriptProperties, null);\\n$page_id = (int) $modx->getOption(\'page_id\',$scriptProperties);\\n\\n\\/\\/ Just being safe in case this is run without a resource in context\\nif (!$page_id) {\\n    if (isset($modx->resource) && is_object($modx->resource)) {\\n        $page_id = $modx->resource->get(\'id\');\\n    }\\n}\\n\\nif (!$page_id) {\\n    return \'Page ID is required.\';\\n}\\n\\n$criteria = array();\\n$criteria[\'page_id\'] = $page_id;\\n$criteria[\'PageAsset.is_active\'] = true;\\nif (isset($scriptProperties[\'is_image\'])) {\\n    $criteria[\'Asset.is_image\'] = (bool) $scriptProperties[\'is_image\'];\\n}\\nif (isset($scriptProperties[\'group\'])) {\\n    $criteria[\'PageAsset.group\'] = $scriptProperties[\'group\'];\\n}\\n\\n$c = $modx->newQuery(\'PageAsset\');\\n$c->where($criteria);\\nif ($sort && $dir) {\\n    $c->sortby($sort,$dir);\\n}\\nelseif($sort) {\\n    $c->sortby($sort);\\n}\\nif ($scriptProperties[\'limit\']) {\\n    $c->limit($scriptProperties[\'limit\']);\\n}\\n$cnt = $modx->getCount(\'PageAsset\',$c);\\n\\n$ProductAssets = $modx->getCollectionGraph(\'PageAsset\',\'{\\"Asset\\":{}}\', $c);\\n\\nif ($ProductAssets) {\\n    return $Snippet->format($ProductAssets,$innerTpl,$outerTpl,$firstTpl,$lastTpl,$onOne,$cnt);    \\n}\\n\\n$modx->log(\\\\modX::LOG_LEVEL_DEBUG, \\"No results found\\",\'\',\'getPageAssets\',__LINE__);\\n\\nreturn;"}',
        'guid' => '47dafdf3084ae5b1b1a3b370102fca38',
        'native_key' => 2,
        'signature' => '476eb9f55dd8c2fb899bdd230c606ffa',
      ),
      '572e0af8d3cbee27099016b4d0e868bd' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":3,"source":0,"property_preprocess":0,"name":"resize","description":"Custom output filter for resizing an image asset by its asset_id. Pass a single parameter specifying {width}x{height}.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * @name resize\\n * @description Custom output filter for resizing an image asset by its asset_id. Pass a single parameter specifying {width}x{height}.\\n *\\n * USAGE:\\n *\\n * Apply this filter to the raw asset_id to manipulate the URL inside a product page or chunks that \\n * format assets.\\n *\\n * <img src=\\"[[+asset_id:resize=`500x300`]]\\" width=\\"500\\" width=\\"300\\" \\/>\\n *\\n * @package assman\\n *\\/\\n$modx->log(\\\\modX::LOG_LEVEL_DEBUG, \\"scriptProperties:\\\\n\\".print_r($scriptProperties,true),\'\',\'Snippet resize\');\\n\\n$core_path = $modx->getOption(\'assman.core_path\', null, MODX_CORE_PATH.\'components\\/assman\\/\');\\nrequire_once $core_path .\'vendor\\/autoload.php\';\\n\\n$asset_id = $input;\\n\\nif (!is_numeric($asset_id)) {\\n    $modx->log(\\\\modX::LOG_LEVEL_ERROR,\'Invalid input. Integer asset ID required. \' .print_r($scriptProperties,true),\'\',\'resize Output Filer\');\\n    return;\\n} \\n\\/\\/ e.g. 500x300\\nif (preg_match(\'\\/^(\\\\d+)x(\\\\d+)$\\/\',$options,$m)) {\\n    $w = $m[1];\\n    $h = $m[2];\\n}\\nelse {\\n    $modx->log(\\\\modX::LOG_LEVEL_ERROR,\'Invalid image dimensions passed: \'.$options,\'\',\'resize Output Filer\');\\n    $w = $modx->getOption(\'assman.thumbnail_width\');\\n    $h = $modx->getOption(\'assman.thumbnail_height\');\\n}\\n\\nif (!$Asset = $modx->getObject(\'Asset\', array(\'asset_id\' => $asset_id))) {\\n    $modx->log(\\\\modX::LOG_LEVEL_ERROR,\'Asset not found.\',\'\',\'resize Output Filer\');\\n    return $Asset->getMissingThumbnail($w,$h);\\n}\\n\\nreturn $Asset->getThumbnailURL($w, $h);\\n\\n\\n\\/*EOF*\\/","locked":0,"properties":null,"moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * @name resize\\n * @description Custom output filter for resizing an image asset by its asset_id. Pass a single parameter specifying {width}x{height}.\\n *\\n * USAGE:\\n *\\n * Apply this filter to the raw asset_id to manipulate the URL inside a product page or chunks that \\n * format assets.\\n *\\n * <img src=\\"[[+asset_id:resize=`500x300`]]\\" width=\\"500\\" width=\\"300\\" \\/>\\n *\\n * @package assman\\n *\\/\\n$modx->log(\\\\modX::LOG_LEVEL_DEBUG, \\"scriptProperties:\\\\n\\".print_r($scriptProperties,true),\'\',\'Snippet resize\');\\n\\n$core_path = $modx->getOption(\'assman.core_path\', null, MODX_CORE_PATH.\'components\\/assman\\/\');\\nrequire_once $core_path .\'vendor\\/autoload.php\';\\n\\n$asset_id = $input;\\n\\nif (!is_numeric($asset_id)) {\\n    $modx->log(\\\\modX::LOG_LEVEL_ERROR,\'Invalid input. Integer asset ID required. \' .print_r($scriptProperties,true),\'\',\'resize Output Filer\');\\n    return;\\n} \\n\\/\\/ e.g. 500x300\\nif (preg_match(\'\\/^(\\\\d+)x(\\\\d+)$\\/\',$options,$m)) {\\n    $w = $m[1];\\n    $h = $m[2];\\n}\\nelse {\\n    $modx->log(\\\\modX::LOG_LEVEL_ERROR,\'Invalid image dimensions passed: \'.$options,\'\',\'resize Output Filer\');\\n    $w = $modx->getOption(\'assman.thumbnail_width\');\\n    $h = $modx->getOption(\'assman.thumbnail_height\');\\n}\\n\\nif (!$Asset = $modx->getObject(\'Asset\', array(\'asset_id\' => $asset_id))) {\\n    $modx->log(\\\\modX::LOG_LEVEL_ERROR,\'Asset not found.\',\'\',\'resize Output Filer\');\\n    return $Asset->getMissingThumbnail($w,$h);\\n}\\n\\nreturn $Asset->getThumbnailURL($w, $h);\\n\\n\\n\\/*EOF*\\/"}',
        'guid' => '3ba363f4e4c8f306dcc2d86fc295924d',
        'native_key' => 3,
        'signature' => '8d56d8ad3e2d50993b4da433d4515d2c',
      ),
      '3fd768992f180956867c3dd0e23dd847' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":4,"source":0,"property_preprocess":0,"name":"scale2h","description":"Custom output filter for resizing an image asset (by its asset_id) to a given height. Pass a single parameter specifying height. The width will be calculated to preserve the original aspect ratio.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * @name scale2h\\n * @description Custom output filter for resizing an image asset (by its asset_id) to a given height. Pass a single parameter specifying height. The width will be calculated to preserve the original aspect ratio.\\n *\\n * USAGE:\\n *\\n * Apply this filter to the raw asset_id to manipulate the URL inside a product page or chunks that \\n * format assets.\\n *\\n * We set a placeholder for the calculated width: [[+asset_id.width]]\\n *\\n * <img src=\\"[[+asset_id:scale2h=`300`]]\\" width=\\"[[+asset_id.width]]\\" height=\\"300\\"\\/>\\n *\\n * @package assman\\n *\\/\\n\\n$modx->log(\\\\modX::LOG_LEVEL_DEBUG, \\"scriptProperties:\\\\n\\".print_r($scriptProperties,true),\'\',\'Snippet scale2h\');\\n\\n$core_path = $modx->getOption(\'assman.core_path\', null, MODX_CORE_PATH.\'components\\/assman\\/\');\\nrequire_once $core_path .\'vendor\\/autoload.php\';\\n\\n$asset_id = $input;\\n$new_h = $options;\\n\\nif (!is_numeric($asset_id)) {\\n    $modx->log(\\\\modX::LOG_LEVEL_ERROR,\'Invalid input. Integer asset ID required. \' .print_r($scriptProperties,true),\'\',\'scale2h Output Filer\');\\n    return;\\n} \\n\\nif (!is_numeric($new_h)) {\\n    $modx->log(\\\\modX::LOG_LEVEL_ERROR,\'Invalid option. Integer height required. \' .print_r($scriptProperties,true),\'\',\'scale2h Output Filer\');\\n    return;\\n}\\n\\nif (!$Asset = $modx->getObject(\'Asset\', array(\'asset_id\' => $asset_id))) {\\n    $modx->log(\\\\modX::LOG_LEVEL_ERROR,\'Asset not found: \'.$asset_id,\'\',\'scale2h Output Filer\');\\n    return $Asset->getMissingThumbnail($new_h,$new_h); \\/\\/square\\n}\\n\\n\\/\\/ Calculate the new dimensions\\n\\/\\/ old XY (from src) to new XY\\n$ox = $Asset->get(\'width\');\\n$oy = $Asset->get(\'height\');\\n$nx = floor($new_h * ( $ox \\/ $oy ));\\n$ny = $new_h;\\n        \\n$modx->log(\\\\modX::LOG_LEVEL_INFO,\'New asset dimensions calculated: \'.$nx, $ny,\'\',\'scale2h Output Filer\');\\n\\n$modx->setPlaceholder(\'asset_id.width\', $ny);\\nreturn $Asset->getThumbnailURL($nx, $ny);\\n\\n\\n\\/*EOF*\\/","locked":0,"properties":null,"moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * @name scale2h\\n * @description Custom output filter for resizing an image asset (by its asset_id) to a given height. Pass a single parameter specifying height. The width will be calculated to preserve the original aspect ratio.\\n *\\n * USAGE:\\n *\\n * Apply this filter to the raw asset_id to manipulate the URL inside a product page or chunks that \\n * format assets.\\n *\\n * We set a placeholder for the calculated width: [[+asset_id.width]]\\n *\\n * <img src=\\"[[+asset_id:scale2h=`300`]]\\" width=\\"[[+asset_id.width]]\\" height=\\"300\\"\\/>\\n *\\n * @package assman\\n *\\/\\n\\n$modx->log(\\\\modX::LOG_LEVEL_DEBUG, \\"scriptProperties:\\\\n\\".print_r($scriptProperties,true),\'\',\'Snippet scale2h\');\\n\\n$core_path = $modx->getOption(\'assman.core_path\', null, MODX_CORE_PATH.\'components\\/assman\\/\');\\nrequire_once $core_path .\'vendor\\/autoload.php\';\\n\\n$asset_id = $input;\\n$new_h = $options;\\n\\nif (!is_numeric($asset_id)) {\\n    $modx->log(\\\\modX::LOG_LEVEL_ERROR,\'Invalid input. Integer asset ID required. \' .print_r($scriptProperties,true),\'\',\'scale2h Output Filer\');\\n    return;\\n} \\n\\nif (!is_numeric($new_h)) {\\n    $modx->log(\\\\modX::LOG_LEVEL_ERROR,\'Invalid option. Integer height required. \' .print_r($scriptProperties,true),\'\',\'scale2h Output Filer\');\\n    return;\\n}\\n\\nif (!$Asset = $modx->getObject(\'Asset\', array(\'asset_id\' => $asset_id))) {\\n    $modx->log(\\\\modX::LOG_LEVEL_ERROR,\'Asset not found: \'.$asset_id,\'\',\'scale2h Output Filer\');\\n    return $Asset->getMissingThumbnail($new_h,$new_h); \\/\\/square\\n}\\n\\n\\/\\/ Calculate the new dimensions\\n\\/\\/ old XY (from src) to new XY\\n$ox = $Asset->get(\'width\');\\n$oy = $Asset->get(\'height\');\\n$nx = floor($new_h * ( $ox \\/ $oy ));\\n$ny = $new_h;\\n        \\n$modx->log(\\\\modX::LOG_LEVEL_INFO,\'New asset dimensions calculated: \'.$nx, $ny,\'\',\'scale2h Output Filer\');\\n\\n$modx->setPlaceholder(\'asset_id.width\', $ny);\\nreturn $Asset->getThumbnailURL($nx, $ny);\\n\\n\\n\\/*EOF*\\/"}',
        'guid' => '89be4baee83559a66964d5a6905f3d31',
        'native_key' => 4,
        'signature' => '17ddf80610b434138d3ff94084de6af7',
      ),
      '81ddece75555824a3aab52769a075c9c' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":5,"source":0,"property_preprocess":0,"name":"scale2w","description":"Custom output filter for resizing an image asset (by its asset_id) to a given width. Pass a single parameter specifying width. The height will be calculated to preserve the original aspect ratio.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * @name scale2w\\n * @description Custom output filter for resizing an image asset (by its asset_id) to a given width. Pass a single parameter specifying width. The height will be calculated to preserve the original aspect ratio.\\n *\\n * USAGE:\\n *\\n * Apply this filter to the raw asset_id to manipulate the URL inside a product page or chunks that \\n * format assets.\\n *\\n * We set a placeholder for the calculated height: [[+asset_id.height]]\\n *\\n * <img src=\\"[[+asset_id:scale2w=`400`]]\\" width=\\"400\\" height=\\"[[+asset_id.height]]\\"\\/>\\n *\\n * @package assman\\n *\\/\\n\\n$modx->log(\\\\modX::LOG_LEVEL_DEBUG, \\"scriptProperties:\\\\n\\".print_r($scriptProperties,true),\'\',\'Snippet scale2w\');\\n\\n$core_path = $modx->getOption(\'assman.core_path\', null, MODX_CORE_PATH.\'components\\/assman\\/\');\\nrequire_once $core_path .\'vendor\\/autoload.php\';\\n\\n$asset_id = $input;\\n$new_w = $options;\\n\\nif (!is_numeric($asset_id)) {\\n    $modx->log(\\\\modX::LOG_LEVEL_ERROR,\'Invalid input. Integer asset ID required. \'.$asset_id .print_r($scriptProperties,true),\'\',\'scale2w Output Filer\');\\n    return;\\n} \\n\\nif (!is_numeric($new_w)) {\\n    $modx->log(\\\\modX::LOG_LEVEL_ERROR,\'Invalid option. Integer width required. \' .print_r($scriptProperties,true),\'\',\'scale2w Output Filer\');\\n    return;\\n}\\n\\nif (!$Asset = $modx->getObject(\'Asset\', array(\'asset_id\' => $asset_id))) {\\n    $modx->log(\\\\modX::LOG_LEVEL_ERROR,\'Asset not found: \'. $asset_id,\'\',\'scale2w Output Filer\');\\n    return $Asset->getMissingThumbnail($new_w,$new_w); \\/\\/ square.\\n}\\n\\n\\/\\/ Calculate the new dimensions\\n\\/\\/ old XY (from src) to new XY\\n$ox = $Asset->get(\'width\');\\n$oy = $Asset->get(\'height\');\\n$nx = $new_w;\\n$ny = floor($new_w * ($oy \\/ $ox));\\n\\n$modx->log(\\\\modX::LOG_LEVEL_INFO,\'New asset dimensions calculated: \'.$nx, $ny,\'\',\'scale2w Output Filer\');\\n\\n$modx->setPlaceholder(\'asset_id.height\', $ny);\\n\\nreturn $Asset->getThumbnailURL($nx, $ny);\\n\\n\\/*EOF*\\/","locked":0,"properties":null,"moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * @name scale2w\\n * @description Custom output filter for resizing an image asset (by its asset_id) to a given width. Pass a single parameter specifying width. The height will be calculated to preserve the original aspect ratio.\\n *\\n * USAGE:\\n *\\n * Apply this filter to the raw asset_id to manipulate the URL inside a product page or chunks that \\n * format assets.\\n *\\n * We set a placeholder for the calculated height: [[+asset_id.height]]\\n *\\n * <img src=\\"[[+asset_id:scale2w=`400`]]\\" width=\\"400\\" height=\\"[[+asset_id.height]]\\"\\/>\\n *\\n * @package assman\\n *\\/\\n\\n$modx->log(\\\\modX::LOG_LEVEL_DEBUG, \\"scriptProperties:\\\\n\\".print_r($scriptProperties,true),\'\',\'Snippet scale2w\');\\n\\n$core_path = $modx->getOption(\'assman.core_path\', null, MODX_CORE_PATH.\'components\\/assman\\/\');\\nrequire_once $core_path .\'vendor\\/autoload.php\';\\n\\n$asset_id = $input;\\n$new_w = $options;\\n\\nif (!is_numeric($asset_id)) {\\n    $modx->log(\\\\modX::LOG_LEVEL_ERROR,\'Invalid input. Integer asset ID required. \'.$asset_id .print_r($scriptProperties,true),\'\',\'scale2w Output Filer\');\\n    return;\\n} \\n\\nif (!is_numeric($new_w)) {\\n    $modx->log(\\\\modX::LOG_LEVEL_ERROR,\'Invalid option. Integer width required. \' .print_r($scriptProperties,true),\'\',\'scale2w Output Filer\');\\n    return;\\n}\\n\\nif (!$Asset = $modx->getObject(\'Asset\', array(\'asset_id\' => $asset_id))) {\\n    $modx->log(\\\\modX::LOG_LEVEL_ERROR,\'Asset not found: \'. $asset_id,\'\',\'scale2w Output Filer\');\\n    return $Asset->getMissingThumbnail($new_w,$new_w); \\/\\/ square.\\n}\\n\\n\\/\\/ Calculate the new dimensions\\n\\/\\/ old XY (from src) to new XY\\n$ox = $Asset->get(\'width\');\\n$oy = $Asset->get(\'height\');\\n$nx = $new_w;\\n$ny = floor($new_w * ($oy \\/ $ox));\\n\\n$modx->log(\\\\modX::LOG_LEVEL_INFO,\'New asset dimensions calculated: \'.$nx, $ny,\'\',\'scale2w Output Filer\');\\n\\n$modx->setPlaceholder(\'asset_id.height\', $ny);\\n\\nreturn $Asset->getThumbnailURL($nx, $ny);\\n\\n\\/*EOF*\\/"}',
        'guid' => 'a6a4198defa87f86cde7bf3082f00ee4',
        'native_key' => 5,
        'signature' => 'ebd09ae5ca25d4b3890258b9f68adf9a',
      ),
      '9615ad03d15ea47d617e8e9f5440785c' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":6,"source":0,"property_preprocess":0,"name":"src","description":"Returns the URL to the asset (specified by asset_id). This may also be used as an Output Filter.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * @name src\\n * @description Returns the URL to the asset (specified by asset_id). This may also be used as an Output Filter.\\n *\\n * This Snippet is intended as a simpler alternative to the Asset Snippet. \\n * The Asset Snippet offers more functionality because it can return all of an asset\'s properties,\\n * whereas the src Snippet returns ONLY the URL (i.e. the src).\\n *\\n * All parameters are optional, but for image assets, you can pass &height and\\/or &width parameters to trigger resizing.\\n *\\n * If no &height or &width arguments are passed, then no resizing takes place: return the full size of the original asset image.\\n * If the snippet call sets a &width but no &height, then return a scaled version of the asset scaled to the desired width.\\n * If the snippet call sets a &height but no &width, then return a scaled version of the asset scaled to the desired height.\\n * If both &height and &width are set, then do what the \\"scale\\" Snippet does and scale asset to the desired dimensions\\n * \\n * USAGE EXAMPLES\\n *      <img src=\\"[[src? &asset_id=`123`]]\\"\\/>\\n *      <a href=\\"[[src? &asset_id=`123`]]\\">Download<a\\/>\\n *\\n * AS AN OUTPUT FILTER\\n *  \\n * This can only be used to format an asset_id in the same ways and places as the scale2h and scale2w Snippets, e.g.\\n * in the innerTpl of the getPageAssets Snippet:\\n *      [[getPageAssets? &innerTpl=`myChunk`]]\\n *\\n * myChunk:\\n *  [[+Asset.title]] <a href=\\"[[+asset_id:src]]\\">View<\\/a>\\n * or:\\n *  [[+Asset.title]] <img src=\\"[[+asset_id:src=`300x200`]]\\" width=\\"300\\" height=\\"200\\"\\/>\\n *    \\n *\\n * Parameters\\n * -----------------------------\\n * @param integer &asset_id (required)\\n * @param integer &width in pixels (optional)\\n * @param integer &height in pixels (optional)\\n *\\n * Variables\\n * ---------\\n * @var $modx modX\\n * @var $scriptProperties array\\n *\\n * @package assman\\n *\\/\\n$core_path = $modx->getOption(\'assman.core_path\', null, MODX_CORE_PATH.\'components\\/assman\\/\');\\nrequire_once $core_path .\'vendor\\/autoload.php\';\\n$Snippet = new \\\\Assman\\\\Snippet($modx);\\n$Snippet->log(\'src\',$scriptProperties);\\n\\n\\n$asset_id = (int) $modx->getOption(\'asset_id\', $scriptProperties);\\n$width = (int) $modx->getOption(\'width\', $scriptProperties);\\n$height = (int) $modx->getOption(\'height\', $scriptProperties);\\n\\n\\/\\/ called as output filter?\\nif (isset($input) && isset($options)) {\\n    $asset_id = (int) $input;\\n    if (strpos($options, \'x\') !== false) {\\n        list($width, $height) = explode(\'x\',$options);\\n    }\\n}\\n\\n$Asset = $modx->getObject(\'Asset\', $asset_id);\\n\\nif(!$Asset) {\\n\\t$modx->log(\\\\modX::LOG_LEVEL_DEBUG, \\"No results found\\",\'\',\'src\',__LINE__);\\n\\treturn;\\n}\\n\\n\\n$ass_props = array(\\n\\t\'asset_id\'\\t=> $Asset->get(\'asset_id\'),\\n\\t\'title\'\\t=> $Asset->get(\'title\'),\\n\\t\'alt\'\\t=> $Asset->get(\'alt\'),\\n\\t\'width\'\\t=> $Asset->get(\'width\'),\\n\\t\'height\'\\t=> $Asset->get(\'height\'),\\n\\t\'thumbnail_url\'\\t=> $Asset->get(\'thumbnail_url\'),\\n\\t\'url\'\\t=> $Asset->get(\'url\')\\n);\\n\\nif($Asset->is_image) {\\n\\n\\tif( $width == 0 && $height > 0 ) {\\n\\t\\t\\/\\/ Calculate the new dimensions\\n\\t\\t$nx = floor($height * ( $Asset->get(\'width\') \\/ $Asset->get(\'height\') ));\\n\\t\\t$ny = $height;\\n        return $Asset->getResizedImage($Asset->get(\'path\'), $asset_id,$nx,$ny);\\n\\t}\\n\\n\\tif( $height == 0 && $width > 0 ) {\\n\\t\\t\\/\\/ Calculate the new dimensions\\n\\t\\t$nx = $width;\\n\\t\\t$ny = floor($width * ($Asset->get(\'height\') \\/ $Asset->get(\'width\')));\\n        return $Asset->getResizedImage($Asset->get(\'path\'), $asset_id,$nx,$ny);\\n\\t}\\n\\n\\tif( $height > 0 && $width > 0 ) {\\n\\t\\treturn $Asset->getResizedImage($Asset->get(\'path\'), $asset_id,$width,$height);\\n\\t}\\n}\\n\\nreturn $Asset->get(\'url\');","locked":0,"properties":null,"moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * @name src\\n * @description Returns the URL to the asset (specified by asset_id). This may also be used as an Output Filter.\\n *\\n * This Snippet is intended as a simpler alternative to the Asset Snippet. \\n * The Asset Snippet offers more functionality because it can return all of an asset\'s properties,\\n * whereas the src Snippet returns ONLY the URL (i.e. the src).\\n *\\n * All parameters are optional, but for image assets, you can pass &height and\\/or &width parameters to trigger resizing.\\n *\\n * If no &height or &width arguments are passed, then no resizing takes place: return the full size of the original asset image.\\n * If the snippet call sets a &width but no &height, then return a scaled version of the asset scaled to the desired width.\\n * If the snippet call sets a &height but no &width, then return a scaled version of the asset scaled to the desired height.\\n * If both &height and &width are set, then do what the \\"scale\\" Snippet does and scale asset to the desired dimensions\\n * \\n * USAGE EXAMPLES\\n *      <img src=\\"[[src? &asset_id=`123`]]\\"\\/>\\n *      <a href=\\"[[src? &asset_id=`123`]]\\">Download<a\\/>\\n *\\n * AS AN OUTPUT FILTER\\n *  \\n * This can only be used to format an asset_id in the same ways and places as the scale2h and scale2w Snippets, e.g.\\n * in the innerTpl of the getPageAssets Snippet:\\n *      [[getPageAssets? &innerTpl=`myChunk`]]\\n *\\n * myChunk:\\n *  [[+Asset.title]] <a href=\\"[[+asset_id:src]]\\">View<\\/a>\\n * or:\\n *  [[+Asset.title]] <img src=\\"[[+asset_id:src=`300x200`]]\\" width=\\"300\\" height=\\"200\\"\\/>\\n *    \\n *\\n * Parameters\\n * -----------------------------\\n * @param integer &asset_id (required)\\n * @param integer &width in pixels (optional)\\n * @param integer &height in pixels (optional)\\n *\\n * Variables\\n * ---------\\n * @var $modx modX\\n * @var $scriptProperties array\\n *\\n * @package assman\\n *\\/\\n$core_path = $modx->getOption(\'assman.core_path\', null, MODX_CORE_PATH.\'components\\/assman\\/\');\\nrequire_once $core_path .\'vendor\\/autoload.php\';\\n$Snippet = new \\\\Assman\\\\Snippet($modx);\\n$Snippet->log(\'src\',$scriptProperties);\\n\\n\\n$asset_id = (int) $modx->getOption(\'asset_id\', $scriptProperties);\\n$width = (int) $modx->getOption(\'width\', $scriptProperties);\\n$height = (int) $modx->getOption(\'height\', $scriptProperties);\\n\\n\\/\\/ called as output filter?\\nif (isset($input) && isset($options)) {\\n    $asset_id = (int) $input;\\n    if (strpos($options, \'x\') !== false) {\\n        list($width, $height) = explode(\'x\',$options);\\n    }\\n}\\n\\n$Asset = $modx->getObject(\'Asset\', $asset_id);\\n\\nif(!$Asset) {\\n\\t$modx->log(\\\\modX::LOG_LEVEL_DEBUG, \\"No results found\\",\'\',\'src\',__LINE__);\\n\\treturn;\\n}\\n\\n\\n$ass_props = array(\\n\\t\'asset_id\'\\t=> $Asset->get(\'asset_id\'),\\n\\t\'title\'\\t=> $Asset->get(\'title\'),\\n\\t\'alt\'\\t=> $Asset->get(\'alt\'),\\n\\t\'width\'\\t=> $Asset->get(\'width\'),\\n\\t\'height\'\\t=> $Asset->get(\'height\'),\\n\\t\'thumbnail_url\'\\t=> $Asset->get(\'thumbnail_url\'),\\n\\t\'url\'\\t=> $Asset->get(\'url\')\\n);\\n\\nif($Asset->is_image) {\\n\\n\\tif( $width == 0 && $height > 0 ) {\\n\\t\\t\\/\\/ Calculate the new dimensions\\n\\t\\t$nx = floor($height * ( $Asset->get(\'width\') \\/ $Asset->get(\'height\') ));\\n\\t\\t$ny = $height;\\n        return $Asset->getResizedImage($Asset->get(\'path\'), $asset_id,$nx,$ny);\\n\\t}\\n\\n\\tif( $height == 0 && $width > 0 ) {\\n\\t\\t\\/\\/ Calculate the new dimensions\\n\\t\\t$nx = $width;\\n\\t\\t$ny = floor($width * ($Asset->get(\'height\') \\/ $Asset->get(\'width\')));\\n        return $Asset->getResizedImage($Asset->get(\'path\'), $asset_id,$nx,$ny);\\n\\t}\\n\\n\\tif( $height > 0 && $width > 0 ) {\\n\\t\\treturn $Asset->getResizedImage($Asset->get(\'path\'), $asset_id,$width,$height);\\n\\t}\\n}\\n\\nreturn $Asset->get(\'url\');"}',
        'guid' => '8248236b69ba43690a60a99484f4bc28',
        'native_key' => 6,
        'signature' => '84a37730a33fb0ad293fd4c8ad773993',
      ),
    ),
    'Plugins' => 
    array (
      '6a7b92e78429d5a501bbbfc6afd1bcbe' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'related_object_attributes' => 
        array (
          'PluginEvents' => 
          array (
            'preserve_keys' => true,
            'update_object' => false,
            'unique_key' => 
            array (
              0 => 'pluginid',
              1 => 'event',
            ),
          ),
        ),
        'class' => 'modPlugin',
        'object' => '{"id":1,"source":0,"property_preprocess":0,"name":"Asset Manager","description":"Multi-purpose plugin for Asset Manager handling manager customizations","editor_type":0,"category":0,"cache_type":0,"plugincode":"\\/**\\n * @name Asset Manager\\n * @description Multi-purpose plugin for Asset Manager handling manager customizations\\n * @PluginEvents OnManagerPageInit,OnDocFormPrerender,OnDocFormSave\\n *\\n *\\/\\n \\n$core_path = $modx->getOption(\'assman.core_path\', null, MODX_CORE_PATH.\'components\\/assman\\/\');\\nrequire_once $core_path .\'vendor\\/autoload.php\';\\n\\nswitch ($modx->event->name) {\\n\\n    \\/\\/------------------------------------------------------------------------------\\n    \\/\\/! OnManagerPageInit\\n    \\/\\/  Load up custom CSS for the manager\\n    \\/\\/------------------------------------------------------------------------------\\n    case \'OnManagerPageInit\':\\n        $assets_url = $modx->getOption(\'assman.assets_url\', null, MODX_ASSETS_URL.\'components\\/assman\\/\');\\n        $modx->log(modX::LOG_LEVEL_DEBUG,\'Registering \'.$assets_url.\'css\\/mgr.css\',\'\',\'Asset Manager Plugin:OnManagerPageInit\');\\n        $modx->regClientCSS($assets_url.\'css\\/mgr.css\');\\n        break;\\n        \\n\\n    \\/\\/------------------------------------------------------------------------------\\n    \\/\\/! OnDocFormPrerender\\n    \\/\\/ Add a custom tab to the resource panel for resource types OTHER THAN Taxonomy\\n    \\/\\/ and Terms (no sense in categorizing categories). \\n    \\/\\/ We have to use $_GET to read the class_key because it\'s otherwise not avail.\\n    \\/\\/ Remember: $resource will be null for new Resources!\\n    \\/\\/------------------------------------------------------------------------------\\n    case \'OnDocFormPrerender\':\\n        $classes = json_decode($modx->getOption(\'assman.class_keys\'),true);\\n        \\/\\/ New Resource?\\n        if (empty($resource)) {\\n            $class_key = (isset($_GET[\'class_key\'])) ? $_GET[\'class_key\'] : \'modDocument\';\\n            $page_id = 0;\\n        } \\n        else {\\n            $class_key = $resource->get(\'class_key\');    \\n            $page_id = $resource->get(\'id\');\\n        }\\n\\n        if (in_array($class_key,$classes)) {\\n            $Page = new \\\\Assman\\\\PageController($modx);\\n            $Page->getPageAssetsTab(array(\'page_id\'=>$page_id,\'_nolayout\'=>true));\\n        }\\n        break;\\n        \\n    case \'OnDocFormSave\':\\n        $modx->log(modX::LOG_LEVEL_DEBUG,\'\',\'\',\'asset Manager Plugin:OnDocFormSave\');\\n        if ($pageassets = $resource->get(\'PageAssets\')) {\\n            $A = $modx->newObject(\'Asset\');\\n            $data = $A->indexedToRecordset($pageassets);\\n            $modx->log(modX::LOG_LEVEL_ERROR,print_r($data,true),\'\',\'Assman\');\\n            $A->dictateRelations($data,$resource->get(\'id\'));\\n        }\\n        break;\\n    }","locked":0,"properties":null,"disabled":0,"moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * @name Asset Manager\\n * @description Multi-purpose plugin for Asset Manager handling manager customizations\\n * @PluginEvents OnManagerPageInit,OnDocFormPrerender,OnDocFormSave\\n *\\n *\\/\\n \\n$core_path = $modx->getOption(\'assman.core_path\', null, MODX_CORE_PATH.\'components\\/assman\\/\');\\nrequire_once $core_path .\'vendor\\/autoload.php\';\\n\\nswitch ($modx->event->name) {\\n\\n    \\/\\/------------------------------------------------------------------------------\\n    \\/\\/! OnManagerPageInit\\n    \\/\\/  Load up custom CSS for the manager\\n    \\/\\/------------------------------------------------------------------------------\\n    case \'OnManagerPageInit\':\\n        $assets_url = $modx->getOption(\'assman.assets_url\', null, MODX_ASSETS_URL.\'components\\/assman\\/\');\\n        $modx->log(modX::LOG_LEVEL_DEBUG,\'Registering \'.$assets_url.\'css\\/mgr.css\',\'\',\'Asset Manager Plugin:OnManagerPageInit\');\\n        $modx->regClientCSS($assets_url.\'css\\/mgr.css\');\\n        break;\\n        \\n\\n    \\/\\/------------------------------------------------------------------------------\\n    \\/\\/! OnDocFormPrerender\\n    \\/\\/ Add a custom tab to the resource panel for resource types OTHER THAN Taxonomy\\n    \\/\\/ and Terms (no sense in categorizing categories). \\n    \\/\\/ We have to use $_GET to read the class_key because it\'s otherwise not avail.\\n    \\/\\/ Remember: $resource will be null for new Resources!\\n    \\/\\/------------------------------------------------------------------------------\\n    case \'OnDocFormPrerender\':\\n        $classes = json_decode($modx->getOption(\'assman.class_keys\'),true);\\n        \\/\\/ New Resource?\\n        if (empty($resource)) {\\n            $class_key = (isset($_GET[\'class_key\'])) ? $_GET[\'class_key\'] : \'modDocument\';\\n            $page_id = 0;\\n        } \\n        else {\\n            $class_key = $resource->get(\'class_key\');    \\n            $page_id = $resource->get(\'id\');\\n        }\\n\\n        if (in_array($class_key,$classes)) {\\n            $Page = new \\\\Assman\\\\PageController($modx);\\n            $Page->getPageAssetsTab(array(\'page_id\'=>$page_id,\'_nolayout\'=>true));\\n        }\\n        break;\\n        \\n    case \'OnDocFormSave\':\\n        $modx->log(modX::LOG_LEVEL_DEBUG,\'\',\'\',\'asset Manager Plugin:OnDocFormSave\');\\n        if ($pageassets = $resource->get(\'PageAssets\')) {\\n            $A = $modx->newObject(\'Asset\');\\n            $data = $A->indexedToRecordset($pageassets);\\n            $modx->log(modX::LOG_LEVEL_ERROR,print_r($data,true),\'\',\'Assman\');\\n            $A->dictateRelations($data,$resource->get(\'id\'));\\n        }\\n        break;\\n    }","PluginEvents":"OnManagerPageInit,OnDocFormPrerender,OnDocFormSave"}',
        'guid' => '9f4a84048e9c3f6a2983813381e4c0e7',
        'native_key' => 1,
        'signature' => 'd9810f687a65e6a71a32f37c9498940b',
        'related_objects' => 
        array (
          'PluginEvents' => 
          array (
            'de42deffb08bef28eacae145fd5c352b' => 
            array (
              'class' => 'modPluginEvent',
              'object' => '{"pluginid":0,"event":"OnManagerPageInit","priority":0,"propertyset":0}',
              'guid' => '91383d268444425e380efccf2b116de9',
              'native_key' => 
              array (
                0 => 0,
                1 => 'OnManagerPageInit',
              ),
              'signature' => '7ba7508d2e6fe6d41b8740a5c1b22d0f',
            ),
            'bdca6fe2c9cc0dc4ba7aa1d7c26009e9' => 
            array (
              'class' => 'modPluginEvent',
              'object' => '{"pluginid":0,"event":"OnDocFormPrerender","priority":0,"propertyset":0}',
              'guid' => '53c7b3cabded375565e6755554da9a3d',
              'native_key' => 
              array (
                0 => 0,
                1 => 'OnDocFormPrerender',
              ),
              'signature' => 'bf4c078c60ac298d6448be054a752bf3',
            ),
            '6b7b003de9b21b225fffc86f9f828eb1' => 
            array (
              'class' => 'modPluginEvent',
              'object' => '{"pluginid":0,"event":"OnDocFormSave","priority":0,"propertyset":0}',
              'guid' => '8983c24f55e620978d2529fe61a65c23',
              'native_key' => 
              array (
                0 => 0,
                1 => 'OnDocFormSave',
              ),
              'signature' => '535efec35754d1010d6481e246db4356',
            ),
          ),
        ),
      ),
    ),
  ),
  'related_object_attributes' => 
  array (
    'Snippets' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
    'Chunks' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
    'Plugins' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
      'related_object_attributes' => 
      array (
        'PluginEvents' => 
        array (
          'preserve_keys' => true,
          'update_object' => false,
          'unique_key' => 
          array (
            0 => 'pluginid',
            1 => 'event',
          ),
        ),
      ),
    ),
    'modTemplate' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'templatename',
    ),
    'modTemplateVar' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
  ),
  'namespace' => 'assman',
  'resolve' => 
  array (
    0 => 
    array (
      'type' => 'file',
      'body' => '{"source":"assetmanager-1.1.1-pl\\/modCategory\\/635502ff02025ec4151fec2758b32fe8\\/0\\/","target":"return MODX_ASSETS_PATH . \'components\\/\';","name":"assman"}',
    ),
    1 => 
    array (
      'type' => 'file',
      'body' => '{"source":"assetmanager-1.1.1-pl\\/modCategory\\/635502ff02025ec4151fec2758b32fe8\\/1\\/","target":"return MODX_CORE_PATH . \'components\\/\';","name":"assman"}',
    ),
  ),
  'validate' => NULL,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => 'e54207685216e6adb10ea5857ac2906b',
  'package' => 'modx',
  'class' => 'modCategory',
  'signature' => '635502ff02025ec4151fec2758b32fe8',
  'native_key' => NULL,
  'object' => '{"id":null,"parent":0,"category":"Asset Manager"}',
);
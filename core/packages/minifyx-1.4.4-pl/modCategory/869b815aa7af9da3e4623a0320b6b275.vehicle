<?php return array (
  'unique_key' => 'category',
  'preserve_keys' => false,
  'update_object' => true,
  'related_objects' => 
  array (
    'Snippets' => 
    array (
      'e208c73e1d95a5f680f0b229fd67cbb3' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":0,"source":1,"property_preprocess":0,"name":"MinifyX","description":"MinifyX is a snippet the allows you to combine and minify JS and CSS files","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/** @var array $scriptProperties *\\/\\nif (!$modx->getService(\'minifyx\',\'MinifyX\', MODX_CORE_PATH.\'components\\/minifyx\\/model\\/minifyx\\/\')) {return;}\\n\\/** @var MinifyX $MinifyX *\\/\\n$MinifyX = new MinifyX($modx, $scriptProperties);\\nif (!$MinifyX->prepareCacheFolder()) {\\n\\t$modx->log(modX::LOG_LEVEL_ERROR, \'[MinifyX] Could not create cache dir \\"\'.$MinifyX->config[\'cacheFolder\'].\'\\"\');\\n\\treturn;\\n}\\n$cacheFolderUrl = MODX_BASE_URL . str_replace(MODX_BASE_PATH, \'\', $MinifyX->config[\'cacheFolder\']);\\n\\n$array = array(\\n\\t\'js\' => trim($modx->getOption(\'jsSources\', $scriptProperties, \'\', true)),\\n\\t\'css\' => trim($modx->getOption(\'cssSources\', $scriptProperties, \'\', true)),\\n);\\n\\nforeach ($array as $type => $value) {\\n\\tif (empty($value)) {continue;}\\n\\t$filename = $MinifyX->config[$type.\'Filename\'] . \'_\';\\n\\t$extension = $MinifyX->config[$type.\'Ext\'];\\n\\t$register = $MinifyX->config[\'register\'.ucfirst($type)];\\n\\t$placeholder = !empty($MinifyX->config[$type.\'Placeholder\'])\\n\\t\\t? $MinifyX->config[$type.\'Placeholder\']\\n\\t\\t: \'\';\\n\\n\\t$files = $MinifyX->prepareFiles($value);\\n\\t$properties = array(\\n\\t\\t\'minify\' => $MinifyX->config[\'minify\'.ucfirst($type)]\\n\\t\\t\\t\\t? \'true\'\\n\\t\\t\\t\\t: \'false\',\\n\\t);\\n\\n\\t$result = $MinifyX->Munee($files, $properties);\\n\\t$file = $MinifyX->saveFile($result, $filename, $extension);\\n\\n\\t\\/\\/ Register file on frontend\\n\\tif (!empty($file) && file_exists($MinifyX->config[\'cacheFolder\'] . $file)) {\\n\\t\\tif ($register == \'placeholder\' && $placeholder) {\\n\\t\\t\\t$tag = $type == \'css\'\\n\\t\\t\\t\\t? \'<link rel=\\"stylesheet\\" href=\\"\' . $cacheFolderUrl .  $file . \'\\" type=\\"text\\/css\\" \\/>\'\\n\\t\\t\\t\\t: \'<script type=\\"text\\/javascript\\" src=\\"\' . $cacheFolderUrl . $file . \'\\"><\\/script>\';\\n\\t\\t\\t$modx->setPlaceholder($placeholder, $tag);\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tif ($type == \'css\') {\\n\\t\\t\\t\\t$modx->regClientCSS($cacheFolderUrl . $file);\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\tif ($register == \'startup\') {\\n\\t\\t\\t\\t\\t$modx->regClientStartupScript($cacheFolderUrl . $file);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t$modx->regClientScript($cacheFolderUrl . $file);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\nreturn;","locked":0,"properties":"a:10:{s:9:\\"jsSources\\";a:7:{s:4:\\"name\\";s:9:\\"jsSources\\";s:4:\\"desc\\";s:22:\\"minifyx_prop_jsSources\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:18:\\"minifyx:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:10:\\"cssSources\\";a:7:{s:4:\\"name\\";s:10:\\"cssSources\\";s:4:\\"desc\\";s:23:\\"minifyx_prop_cssSources\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:18:\\"minifyx:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:8:\\"minifyJs\\";a:7:{s:4:\\"name\\";s:8:\\"minifyJs\\";s:4:\\"desc\\";s:21:\\"minifyx_prop_minifyJs\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";b:0;s:7:\\"lexicon\\";s:18:\\"minifyx:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:9:\\"minifyCss\\";a:7:{s:4:\\"name\\";s:9:\\"minifyCss\\";s:4:\\"desc\\";s:22:\\"minifyx_prop_minifyCss\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";b:0;s:7:\\"lexicon\\";s:18:\\"minifyx:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:10:\\"jsFilename\\";a:7:{s:4:\\"name\\";s:10:\\"jsFilename\\";s:4:\\"desc\\";s:23:\\"minifyx_prop_jsFilename\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:7:\\"scripts\\";s:7:\\"lexicon\\";s:18:\\"minifyx:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"cssFilename\\";a:7:{s:4:\\"name\\";s:11:\\"cssFilename\\";s:4:\\"desc\\";s:24:\\"minifyx_prop_cssFilename\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:6:\\"styles\\";s:7:\\"lexicon\\";s:18:\\"minifyx:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:10:\\"registerJs\\";a:7:{s:4:\\"name\\";s:10:\\"registerJs\\";s:4:\\"desc\\";s:23:\\"minifyx_prop_registerJs\\";s:4:\\"type\\";s:4:\\"list\\";s:7:\\"options\\";a:3:{i:0;a:2:{s:5:\\"value\\";s:11:\\"placeholder\\";s:4:\\"text\\";s:11:\\"Placeholder\\";}i:1;a:2:{s:5:\\"value\\";s:7:\\"startup\\";s:4:\\"text\\";s:14:\\"Startup script\\";}i:2;a:2:{s:5:\\"value\\";s:7:\\"default\\";s:4:\\"text\\";s:7:\\"Default\\";}}s:5:\\"value\\";s:11:\\"placeholder\\";s:7:\\"lexicon\\";s:18:\\"minifyx:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:13:\\"jsPlaceholder\\";a:7:{s:4:\\"name\\";s:13:\\"jsPlaceholder\\";s:4:\\"desc\\";s:26:\\"minifyx_prop_jsPlaceholder\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:18:\\"MinifyX.javascript\\";s:7:\\"lexicon\\";s:18:\\"minifyx:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"registerCss\\";a:7:{s:4:\\"name\\";s:11:\\"registerCss\\";s:4:\\"desc\\";s:24:\\"minifyx_prop_registerCss\\";s:4:\\"type\\";s:4:\\"list\\";s:7:\\"options\\";a:2:{i:0;a:2:{s:5:\\"value\\";s:11:\\"placeholder\\";s:4:\\"text\\";s:11:\\"Placeholder\\";}i:1;a:2:{s:5:\\"value\\";s:7:\\"default\\";s:4:\\"text\\";s:7:\\"Default\\";}}s:5:\\"value\\";s:11:\\"placeholder\\";s:7:\\"lexicon\\";s:18:\\"minifyx:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:14:\\"cssPlaceholder\\";a:7:{s:4:\\"name\\";s:14:\\"cssPlaceholder\\";s:4:\\"desc\\";s:27:\\"minifyx_prop_cssPlaceholder\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:11:\\"MinifyX.css\\";s:7:\\"lexicon\\";s:18:\\"minifyx:properties\\";s:4:\\"area\\";s:0:\\"\\";}}","moduleguid":"","static":0,"static_file":"core\\/components\\/minifyx\\/elements\\/snippets\\/snippet.minifyx.php","content":"\\/** @var array $scriptProperties *\\/\\nif (!$modx->getService(\'minifyx\',\'MinifyX\', MODX_CORE_PATH.\'components\\/minifyx\\/model\\/minifyx\\/\')) {return;}\\n\\/** @var MinifyX $MinifyX *\\/\\n$MinifyX = new MinifyX($modx, $scriptProperties);\\nif (!$MinifyX->prepareCacheFolder()) {\\n\\t$modx->log(modX::LOG_LEVEL_ERROR, \'[MinifyX] Could not create cache dir \\"\'.$MinifyX->config[\'cacheFolder\'].\'\\"\');\\n\\treturn;\\n}\\n$cacheFolderUrl = MODX_BASE_URL . str_replace(MODX_BASE_PATH, \'\', $MinifyX->config[\'cacheFolder\']);\\n\\n$array = array(\\n\\t\'js\' => trim($modx->getOption(\'jsSources\', $scriptProperties, \'\', true)),\\n\\t\'css\' => trim($modx->getOption(\'cssSources\', $scriptProperties, \'\', true)),\\n);\\n\\nforeach ($array as $type => $value) {\\n\\tif (empty($value)) {continue;}\\n\\t$filename = $MinifyX->config[$type.\'Filename\'] . \'_\';\\n\\t$extension = $MinifyX->config[$type.\'Ext\'];\\n\\t$register = $MinifyX->config[\'register\'.ucfirst($type)];\\n\\t$placeholder = !empty($MinifyX->config[$type.\'Placeholder\'])\\n\\t\\t? $MinifyX->config[$type.\'Placeholder\']\\n\\t\\t: \'\';\\n\\n\\t$files = $MinifyX->prepareFiles($value);\\n\\t$properties = array(\\n\\t\\t\'minify\' => $MinifyX->config[\'minify\'.ucfirst($type)]\\n\\t\\t\\t\\t? \'true\'\\n\\t\\t\\t\\t: \'false\',\\n\\t);\\n\\n\\t$result = $MinifyX->Munee($files, $properties);\\n\\t$file = $MinifyX->saveFile($result, $filename, $extension);\\n\\n\\t\\/\\/ Register file on frontend\\n\\tif (!empty($file) && file_exists($MinifyX->config[\'cacheFolder\'] . $file)) {\\n\\t\\tif ($register == \'placeholder\' && $placeholder) {\\n\\t\\t\\t$tag = $type == \'css\'\\n\\t\\t\\t\\t? \'<link rel=\\"stylesheet\\" href=\\"\' . $cacheFolderUrl .  $file . \'\\" type=\\"text\\/css\\" \\/>\'\\n\\t\\t\\t\\t: \'<script type=\\"text\\/javascript\\" src=\\"\' . $cacheFolderUrl . $file . \'\\"><\\/script>\';\\n\\t\\t\\t$modx->setPlaceholder($placeholder, $tag);\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tif ($type == \'css\') {\\n\\t\\t\\t\\t$modx->regClientCSS($cacheFolderUrl . $file);\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\tif ($register == \'startup\') {\\n\\t\\t\\t\\t\\t$modx->regClientStartupScript($cacheFolderUrl . $file);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t$modx->regClientScript($cacheFolderUrl . $file);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\nreturn;"}',
        'guid' => 'f3a372804f02e933cc1320c377284b9d',
        'native_key' => 0,
        'signature' => 'f69dd27e25c9dbc0ca6e95fad84a4641',
      ),
    ),
    'Plugins' => 
    array (
      'e61b18c45903c676177347eba1c98f01' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modPlugin',
        'object' => '{"id":null,"source":1,"property_preprocess":0,"name":"MinifyX","description":"","editor_type":0,"category":0,"cache_type":0,"plugincode":"switch ($modx->event->name) {\\n\\n\\tcase \'OnSiteRefresh\':\\n\\t\\tif ($MinifyX = $modx->getService(\'minifyx\',\'MinifyX\', MODX_CORE_PATH.\'components\\/minifyx\\/model\\/minifyx\\/\')) {\\n\\t\\t\\t\\/** @var MinifyX $MinifyX *\\/\\n\\t\\t\\t$MinifyX = new MinifyX($modx, array());\\n\\t\\t\\tif ($MinifyX->clearCache()) {\\n\\t\\t\\t\\t$modx->log(modX::LOG_LEVEL_INFO, $modx->lexicon(\'refresh_default\').\': MinifyX\');\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tbreak;\\n\\n\\tcase \'OnWebPagePrerender\':\\n\\t\\t$time = microtime(true);\\n\\t\\t\\/\\/ Process scripts and styles\\n\\t\\tif ($modx->getOption(\'minifyx_process_registered\', null, false, true)) {\\n\\t\\t\\tif (!$modx->getService(\'minifyx\',\'MinifyX\', MODX_CORE_PATH.\'components\\/minifyx\\/model\\/minifyx\\/\')) {return false;}\\n\\n\\t\\t\\t$current = array(\\n\\t\\t\\t\\t\'head\' => $modx->sjscripts,\\n\\t\\t\\t\\t\'body\' => $modx->jscripts,\\n\\t\\t\\t);\\n\\t\\t\\t$included = $excluded = $prepared = $raw = array(\\n\\t\\t\\t\\t\'head\' => array(\'css\' => array(), \'js\' => array(), \'html\' => array()),\\n\\t\\t\\t\\t\'body\' => array(\'css\' => array(), \'js\' => array(), \'html\' => array()),\\n\\t\\t\\t);\\n\\t\\t\\t$exclude = $modx->getOption(\'minifyx_exclude_registered\');\\n\\n\\t\\t\\t\\/\\/ Split all scripts and styles by type\\n\\t\\t\\tforeach ($current as $key => $value) {\\n\\t\\t\\t\\tforeach ($value as $v) {\\n\\t\\t\\t\\t\\tif (preg_match(\'\\/<(?:link|script).*?(?:href|src)=[\\\\\'|\\"](.*?)[\\\\\'|\\"]\\/\', $v, $tmp)) {\\n\\t\\t\\t\\t\\t\\tif (strpos($tmp[1], \'.css\') !== false) {\\n\\t\\t\\t\\t\\t\\t\\tif (!empty($exclude) && preg_match($exclude, $tmp[1])) {\\n\\t\\t\\t\\t\\t\\t\\t\\t$excluded[$key][\'css\'][] = $tmp[1];\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\t\\t\\t$included[$key][\'css\'][] = $tmp[1];\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tif (strpos($tmp[1], \'.js\') !== false) {\\n\\t\\t\\t\\t\\t\\t\\tif (!empty($exclude) && preg_match($exclude, $tmp[1])) {\\n\\t\\t\\t\\t\\t\\t\\t\\t$excluded[$key][\'js\'][] = $tmp[1];\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\t\\t\\t$included[$key][\'js\'][] = $tmp[1];\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\telseif (strpos($v, \'<script\') !== false) {\\n\\t\\t\\t\\t\\t\\t$raw[$key][\'js\'][] = trim(preg_replace(\'#<!--.*?-->(\\\\n|)#s\', \'\', $v));\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\telseif (strpos($v, \'<style\') !== false) {\\n\\t\\t\\t\\t\\t\\t$raw[$key][\'css\'][] = trim(preg_replace(\'#\\/\\\\*.*?\\\\*\\/(\\\\n|)#s\', \'\', $v));\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\t$excluded[$key][\'html\'][] = $v;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t\\/\\/ Main options for MinifyX\\n\\t\\t\\t$scriptProperties = array(\\n\\t\\t\\t\\t\'cacheFolder\' => $modx->getOption(\'minifyx_cacheFolder\', null, \'\\/assets\\/components\\/minifyx\\/cache\\/\', true),\\n\\t\\t\\t\\t\'forceUpdate\' => $modx->getOption(\'minifyx_forceUpdate\', null, false, true),\\n\\t\\t\\t\\t\'minifyJs\' => $modx->getOption(\'minifyx_minifyJs\', null, false, true),\\n\\t\\t\\t\\t\'minifyCss\' => $modx->getOption(\'minifyx_minifyCss\', null, false, true),\\n\\t\\t\\t\\t\'jsFilename\' => $modx->getOption(\'minifyx_jsFilename\', null, \'all\', true),\\n\\t\\t\\t\\t\'cssFilename\' => $modx->getOption(\'minifyx_cssFilename\', null, \'all\', true),\\n\\t\\t\\t);\\n\\n\\t\\t\\t\\/** @var MinifyX $MinifyX *\\/\\n\\t\\t\\t$MinifyX = new MinifyX($modx, $scriptProperties);\\n\\t\\t\\tif (!$MinifyX->prepareCacheFolder()) {\\n\\t\\t\\t\\t$this->modx->log(modX::LOG_LEVEL_ERROR, \'[MinifyX] Could not create cache dir \\"\'.$scriptProperties[\'cacheFolder\'].\'\\"\');\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t\\t$cacheFolderUrl = MODX_BASE_URL . str_replace(MODX_BASE_PATH, \'\', $MinifyX->config[\'cacheFolder\']);\\n\\n\\t\\t\\t\\/\\/ Process raw scripts and styles\\n\\t\\t\\t$tmp_dir = $MinifyX->getTmpDir() . \'resources\\/\' . $modx->resource->id . \'\\/\';\\n\\t\\t\\tforeach ($raw as $key => $value) {\\n\\t\\t\\t\\tforeach ($value as $type => $rows) {\\n\\t\\t\\t\\t\\t$tmp = \'\';\\n\\t\\t\\t\\t\\tif ($type == \'css\' && $modx->getOption(\'minifyx_processRawCss\', null, false, true) ||\\n\\t\\t\\t\\t\\t\\t$type == \'js\' && $modx->getOption(\'minifyx_processRawJs\', null, false, true)) {\\n\\n\\t\\t\\t\\t\\t\\t$text = \'\';\\n\\t\\t\\t\\t\\t\\tforeach ($rows as $text) {\\n\\t\\t\\t\\t\\t\\t\\t$text = preg_replace(\'#^<(script|style).*?>#\', \'\', $text);\\n\\t\\t\\t\\t\\t\\t\\t$text = preg_replace(\'#<\\/(script|style)>$#\', \'\', $text);\\n\\t\\t\\t\\t\\t\\t\\t$tmp .= $text;\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\tif (!empty($tmp)) {\\n\\t\\t\\t\\t\\t\\t\\t$file = sha1($tmp) . \'.\' . $type;\\n\\t\\t\\t\\t\\t\\t\\tif (!file_exists($tmp_dir . $file)) {\\n\\t\\t\\t\\t\\t\\t\\t\\tif (!file_exists($tmp_dir)) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t$MinifyX->makeDir($tmp_dir);\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tfile_put_contents($tmp_dir . $file, $tmp);\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t$included[$key][$type][] = $tmp_dir . $file;\\n\\t\\t\\t\\t\\t\\t\\t$raw[$key][$type] = array();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t\\/\\/ Combine and minify files\\n\\t\\t\\tforeach ($included as $key => $value) {\\n\\t\\t\\t\\tforeach ($value as $type => $files) {\\n\\t\\t\\t\\t\\tif (empty($files)) {continue;}\\n\\n\\t\\t\\t\\t\\t$filename = $MinifyX->config[$type.\'Filename\'] . \'_\';\\n\\t\\t\\t\\t\\t$extension = $MinifyX->config[$type.\'Ext\'];\\n\\n\\t\\t\\t\\t\\t$files = $MinifyX->prepareFiles(implode(\',\', $files));\\n\\t\\t\\t\\t\\t$properties = array(\\n\\t\\t\\t\\t\\t\\t\'minify\' => $MinifyX->config[\'minify\'.ucfirst($type)]\\n\\t\\t\\t\\t\\t\\t\\t\\t? \'true\'\\n\\t\\t\\t\\t\\t\\t\\t\\t: \'false\',\\n\\t\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\t\\t$result = $MinifyX->Munee($files, $properties);\\n\\t\\t\\t\\t\\t$file = $MinifyX->saveFile($result, $filename, $extension);\\n\\t\\t\\t\\t\\tif (!empty($file)) {\\n\\t\\t\\t\\t\\t\\t$prepared[$key][$type][] = $cacheFolderUrl . $file;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t\\/\\/ Combine files by type\\n\\t\\t\\t$final = array(\\n\\t\\t\\t\\t\'head\' => array_merge(\\n\\t\\t\\t\\t\\t$excluded[\'head\'][\'css\'], $prepared[\'head\'][\'css\'], $raw[\'head\'][\'css\'],\\n\\t\\t\\t\\t\\t$excluded[\'head\'][\'js\'], $prepared[\'head\'][\'js\'], $raw[\'head\'][\'js\']\\n\\t\\t\\t\\t),\\n\\t\\t\\t\\t\'body\' => array_merge(\\n\\t\\t\\t\\t\\t$excluded[\'body\'][\'css\'], $prepared[\'body\'][\'css\'], $raw[\'body\'][\'css\'],\\n\\t\\t\\t\\t\\t$excluded[\'body\'][\'js\'], $prepared[\'body\'][\'js\'], $raw[\'body\'][\'js\']\\n\\t\\t\\t\\t),\\n\\t\\t\\t);\\n\\n\\t\\t\\t\\/\\/ Push files to tags\\n\\t\\t\\tforeach ($final as $type => &$value) {\\n\\t\\t\\t\\tforeach ($value as &$file) {\\n\\t\\t\\t\\t\\tif (strpos($file, \'<script\') === false && strpos($file, \'<style\') === false) {\\n\\t\\t\\t\\t\\t\\t$file = preg_match(\'\\/\\\\.css$\\/iu\', $file)\\n\\t\\t\\t\\t\\t\\t\\t? \'<link rel=\\"stylesheet\\" href=\\"\' . $file . \'\\" type=\\"text\\/css\\" \\/>\'\\n\\t\\t\\t\\t\\t\\t\\t: \'<script type=\\"text\\/javascript\\" src=\\"\' . $file . \'\\"><\\/script>\';\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (!empty($excluded[$type][\'html\'])) {\\n\\t\\t\\t\\t\\t$value[] = implode(\\"\\\\n\\", $excluded[$type][\'html\']);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tunset($value);\\n\\n\\t\\t\\t\\/\\/ Replace tags in web page\\n\\t\\t\\t$modx->resource->_output = str_replace(\\n\\t\\t\\t\\tarray($modx->getRegisteredClientStartupScripts() . \\"\\\\n<\\/head>\\", $modx->getRegisteredClientScripts() . \\"\\\\n<\\/body>\\"),\\n\\t\\t\\t\\tarray(implode(\\"\\\\n\\", $final[\'head\']) . \\"\\\\n<\\/head>\\", implode(\\"\\\\n\\", $final[\'body\']) . \\"\\\\n<\\/body>\\"),\\n\\t\\t\\t\\t$modx->resource->_output\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\t\\/\\/ Process images\\n\\t\\tif ($modx->getOption(\'minifyx_process_images\', null, false, true)) {\\n\\t\\t\\tif (!$modx->getService(\'minifyx\',\'MinifyX\', MODX_CORE_PATH.\'components\\/minifyx\\/model\\/minifyx\\/\')) {return false;}\\n\\n\\t\\t\\t$connector = $modx->getOption(\'minifyx_connector\', null, \'\\/assets\\/components\\/minifyx\\/munee.php\', true);\\n\\t\\t\\t$exclude = $modx->getOption(\'minifyx_exclude_images\');\\n\\t\\t\\t$replace = array(\'from\' => array(), \'to\' => array());\\n\\t\\t\\t$site_url = $modx->getOption(\'site_url\');\\n\\t\\t\\t$default = $modx->getOption(\'minifyx_images_filters\', null, \'\', true);\\n\\n\\t\\t\\tpreg_match_all(\'\\/<img.*?>\\/i\', $modx->resource->_output, $tags);\\n\\t\\t\\tforeach ($tags[0] as $tag) {\\n\\t\\t\\t\\tif (preg_match($exclude, $tag)) {\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telseif (preg_match_all(\'\\/(src|height|width|filters)=[\\\\\'|\\"](.*?)[\\\\\'|\\"]\\/i\', $tag, $properties)) {\\n\\t\\t\\t\\t\\tif (count($properties[0]) >= 2) {\\n\\t\\t\\t\\t\\t\\t$file = $connector . \'?files=\';\\n\\t\\t\\t\\t\\t\\t$resize = \'\';\\n\\t\\t\\t\\t\\t\\t$filters = \'\';\\n\\t\\t\\t\\t\\t\\t$tmp = array(\'from\' => array(), \'to\' => array());\\n\\n\\t\\t\\t\\t\\t\\tforeach ($properties[1] as $k => $v) {\\n\\t\\t\\t\\t\\t\\t\\tif ($v == \'src\') {\\n\\t\\t\\t\\t\\t\\t\\t\\t$src = $properties[2][$k];\\n\\t\\t\\t\\t\\t\\t\\t\\tif (strpos($src, \':\\/\\/\') !== false) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (strpos($src, $site_url) !== false) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t$src = str_replace($site_url, \'\', $src);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\/\\/ Image from 3rd party domain\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t$file .= $src;\\n\\t\\t\\t\\t\\t\\t\\t\\t$tmp[\'from\'][\'src\'] = $properties[2][$k];\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\telseif ($v == \'height\' || $v == \'width\') {\\n\\t\\t\\t\\t\\t\\t\\t\\t$resize .=  $v[0] . \'[\'.$properties[2][$k].\']\';\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\telseif ($v == \'filters\') {\\n\\t\\t\\t\\t\\t\\t\\t\\t$filters .= $properties[2][$k];\\n\\t\\t\\t\\t\\t\\t\\t\\t$tmp[\'from\'][\'filters\'] = $properties[0][$k];\\n\\t\\t\\t\\t\\t\\t\\t\\t$tmp[\'to\'][\'filters\'] = \'\';\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\tif (!empty($tmp[\'from\'][\'src\'])) {\\n\\t\\t\\t\\t\\t\\t\\t$resize .= isset($tmp[\'from\'][\'filters\'])\\n\\t\\t\\t\\t\\t\\t\\t\\t? $filters\\n\\t\\t\\t\\t\\t\\t\\t\\t: $default;\\n\\t\\t\\t\\t\\t\\t\\t$tmp[\'to\'][\'src\'] = $file . \'?resize=\' . $resize;\\n\\n\\t\\t\\t\\t\\t\\t\\tksort($tmp[\'from\']);\\n\\t\\t\\t\\t\\t\\t\\tksort($tmp[\'to\']);\\n\\n\\t\\t\\t\\t\\t\\t\\t$replace[\'from\'][] = $tag;\\n\\t\\t\\t\\t\\t\\t\\t$replace[\'to\'][] = str_replace($tmp[\'from\'], $tmp[\'to\'], $tag);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!empty($replace)) {\\n\\t\\t\\t\\t$modx->resource->_output = str_replace(\\n\\t\\t\\t\\t\\t$replace[\'from\'],\\n\\t\\t\\t\\t\\t$replace[\'to\'],\\n\\t\\t\\t\\t\\t$modx->resource->_output\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t$modx->log(modX::LOG_LEVEL_INFO, \'[MinifyX] Total time for page \\"\'.$modx->resource->id.\'\\" = \'.(microtime(true) - $time));\\n\\t\\tbreak;\\n}","locked":0,"properties":null,"disabled":0,"moduleguid":"","static":0,"static_file":"core\\/components\\/minifyx\\/elements\\/plugins\\/plugin.minifyx.php","content":"switch ($modx->event->name) {\\n\\n\\tcase \'OnSiteRefresh\':\\n\\t\\tif ($MinifyX = $modx->getService(\'minifyx\',\'MinifyX\', MODX_CORE_PATH.\'components\\/minifyx\\/model\\/minifyx\\/\')) {\\n\\t\\t\\t\\/** @var MinifyX $MinifyX *\\/\\n\\t\\t\\t$MinifyX = new MinifyX($modx, array());\\n\\t\\t\\tif ($MinifyX->clearCache()) {\\n\\t\\t\\t\\t$modx->log(modX::LOG_LEVEL_INFO, $modx->lexicon(\'refresh_default\').\': MinifyX\');\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tbreak;\\n\\n\\tcase \'OnWebPagePrerender\':\\n\\t\\t$time = microtime(true);\\n\\t\\t\\/\\/ Process scripts and styles\\n\\t\\tif ($modx->getOption(\'minifyx_process_registered\', null, false, true)) {\\n\\t\\t\\tif (!$modx->getService(\'minifyx\',\'MinifyX\', MODX_CORE_PATH.\'components\\/minifyx\\/model\\/minifyx\\/\')) {return false;}\\n\\n\\t\\t\\t$current = array(\\n\\t\\t\\t\\t\'head\' => $modx->sjscripts,\\n\\t\\t\\t\\t\'body\' => $modx->jscripts,\\n\\t\\t\\t);\\n\\t\\t\\t$included = $excluded = $prepared = $raw = array(\\n\\t\\t\\t\\t\'head\' => array(\'css\' => array(), \'js\' => array(), \'html\' => array()),\\n\\t\\t\\t\\t\'body\' => array(\'css\' => array(), \'js\' => array(), \'html\' => array()),\\n\\t\\t\\t);\\n\\t\\t\\t$exclude = $modx->getOption(\'minifyx_exclude_registered\');\\n\\n\\t\\t\\t\\/\\/ Split all scripts and styles by type\\n\\t\\t\\tforeach ($current as $key => $value) {\\n\\t\\t\\t\\tforeach ($value as $v) {\\n\\t\\t\\t\\t\\tif (preg_match(\'\\/<(?:link|script).*?(?:href|src)=[\\\\\'|\\"](.*?)[\\\\\'|\\"]\\/\', $v, $tmp)) {\\n\\t\\t\\t\\t\\t\\tif (strpos($tmp[1], \'.css\') !== false) {\\n\\t\\t\\t\\t\\t\\t\\tif (!empty($exclude) && preg_match($exclude, $tmp[1])) {\\n\\t\\t\\t\\t\\t\\t\\t\\t$excluded[$key][\'css\'][] = $tmp[1];\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\t\\t\\t$included[$key][\'css\'][] = $tmp[1];\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tif (strpos($tmp[1], \'.js\') !== false) {\\n\\t\\t\\t\\t\\t\\t\\tif (!empty($exclude) && preg_match($exclude, $tmp[1])) {\\n\\t\\t\\t\\t\\t\\t\\t\\t$excluded[$key][\'js\'][] = $tmp[1];\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\t\\t\\t$included[$key][\'js\'][] = $tmp[1];\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\telseif (strpos($v, \'<script\') !== false) {\\n\\t\\t\\t\\t\\t\\t$raw[$key][\'js\'][] = trim(preg_replace(\'#<!--.*?-->(\\\\n|)#s\', \'\', $v));\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\telseif (strpos($v, \'<style\') !== false) {\\n\\t\\t\\t\\t\\t\\t$raw[$key][\'css\'][] = trim(preg_replace(\'#\\/\\\\*.*?\\\\*\\/(\\\\n|)#s\', \'\', $v));\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\t$excluded[$key][\'html\'][] = $v;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t\\/\\/ Main options for MinifyX\\n\\t\\t\\t$scriptProperties = array(\\n\\t\\t\\t\\t\'cacheFolder\' => $modx->getOption(\'minifyx_cacheFolder\', null, \'\\/assets\\/components\\/minifyx\\/cache\\/\', true),\\n\\t\\t\\t\\t\'forceUpdate\' => $modx->getOption(\'minifyx_forceUpdate\', null, false, true),\\n\\t\\t\\t\\t\'minifyJs\' => $modx->getOption(\'minifyx_minifyJs\', null, false, true),\\n\\t\\t\\t\\t\'minifyCss\' => $modx->getOption(\'minifyx_minifyCss\', null, false, true),\\n\\t\\t\\t\\t\'jsFilename\' => $modx->getOption(\'minifyx_jsFilename\', null, \'all\', true),\\n\\t\\t\\t\\t\'cssFilename\' => $modx->getOption(\'minifyx_cssFilename\', null, \'all\', true),\\n\\t\\t\\t);\\n\\n\\t\\t\\t\\/** @var MinifyX $MinifyX *\\/\\n\\t\\t\\t$MinifyX = new MinifyX($modx, $scriptProperties);\\n\\t\\t\\tif (!$MinifyX->prepareCacheFolder()) {\\n\\t\\t\\t\\t$this->modx->log(modX::LOG_LEVEL_ERROR, \'[MinifyX] Could not create cache dir \\"\'.$scriptProperties[\'cacheFolder\'].\'\\"\');\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t\\t$cacheFolderUrl = MODX_BASE_URL . str_replace(MODX_BASE_PATH, \'\', $MinifyX->config[\'cacheFolder\']);\\n\\n\\t\\t\\t\\/\\/ Process raw scripts and styles\\n\\t\\t\\t$tmp_dir = $MinifyX->getTmpDir() . \'resources\\/\' . $modx->resource->id . \'\\/\';\\n\\t\\t\\tforeach ($raw as $key => $value) {\\n\\t\\t\\t\\tforeach ($value as $type => $rows) {\\n\\t\\t\\t\\t\\t$tmp = \'\';\\n\\t\\t\\t\\t\\tif ($type == \'css\' && $modx->getOption(\'minifyx_processRawCss\', null, false, true) ||\\n\\t\\t\\t\\t\\t\\t$type == \'js\' && $modx->getOption(\'minifyx_processRawJs\', null, false, true)) {\\n\\n\\t\\t\\t\\t\\t\\t$text = \'\';\\n\\t\\t\\t\\t\\t\\tforeach ($rows as $text) {\\n\\t\\t\\t\\t\\t\\t\\t$text = preg_replace(\'#^<(script|style).*?>#\', \'\', $text);\\n\\t\\t\\t\\t\\t\\t\\t$text = preg_replace(\'#<\\/(script|style)>$#\', \'\', $text);\\n\\t\\t\\t\\t\\t\\t\\t$tmp .= $text;\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\tif (!empty($tmp)) {\\n\\t\\t\\t\\t\\t\\t\\t$file = sha1($tmp) . \'.\' . $type;\\n\\t\\t\\t\\t\\t\\t\\tif (!file_exists($tmp_dir . $file)) {\\n\\t\\t\\t\\t\\t\\t\\t\\tif (!file_exists($tmp_dir)) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t$MinifyX->makeDir($tmp_dir);\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tfile_put_contents($tmp_dir . $file, $tmp);\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t$included[$key][$type][] = $tmp_dir . $file;\\n\\t\\t\\t\\t\\t\\t\\t$raw[$key][$type] = array();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t\\/\\/ Combine and minify files\\n\\t\\t\\tforeach ($included as $key => $value) {\\n\\t\\t\\t\\tforeach ($value as $type => $files) {\\n\\t\\t\\t\\t\\tif (empty($files)) {continue;}\\n\\n\\t\\t\\t\\t\\t$filename = $MinifyX->config[$type.\'Filename\'] . \'_\';\\n\\t\\t\\t\\t\\t$extension = $MinifyX->config[$type.\'Ext\'];\\n\\n\\t\\t\\t\\t\\t$files = $MinifyX->prepareFiles(implode(\',\', $files));\\n\\t\\t\\t\\t\\t$properties = array(\\n\\t\\t\\t\\t\\t\\t\'minify\' => $MinifyX->config[\'minify\'.ucfirst($type)]\\n\\t\\t\\t\\t\\t\\t\\t\\t? \'true\'\\n\\t\\t\\t\\t\\t\\t\\t\\t: \'false\',\\n\\t\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\t\\t$result = $MinifyX->Munee($files, $properties);\\n\\t\\t\\t\\t\\t$file = $MinifyX->saveFile($result, $filename, $extension);\\n\\t\\t\\t\\t\\tif (!empty($file)) {\\n\\t\\t\\t\\t\\t\\t$prepared[$key][$type][] = $cacheFolderUrl . $file;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t\\/\\/ Combine files by type\\n\\t\\t\\t$final = array(\\n\\t\\t\\t\\t\'head\' => array_merge(\\n\\t\\t\\t\\t\\t$excluded[\'head\'][\'css\'], $prepared[\'head\'][\'css\'], $raw[\'head\'][\'css\'],\\n\\t\\t\\t\\t\\t$excluded[\'head\'][\'js\'], $prepared[\'head\'][\'js\'], $raw[\'head\'][\'js\']\\n\\t\\t\\t\\t),\\n\\t\\t\\t\\t\'body\' => array_merge(\\n\\t\\t\\t\\t\\t$excluded[\'body\'][\'css\'], $prepared[\'body\'][\'css\'], $raw[\'body\'][\'css\'],\\n\\t\\t\\t\\t\\t$excluded[\'body\'][\'js\'], $prepared[\'body\'][\'js\'], $raw[\'body\'][\'js\']\\n\\t\\t\\t\\t),\\n\\t\\t\\t);\\n\\n\\t\\t\\t\\/\\/ Push files to tags\\n\\t\\t\\tforeach ($final as $type => &$value) {\\n\\t\\t\\t\\tforeach ($value as &$file) {\\n\\t\\t\\t\\t\\tif (strpos($file, \'<script\') === false && strpos($file, \'<style\') === false) {\\n\\t\\t\\t\\t\\t\\t$file = preg_match(\'\\/\\\\.css$\\/iu\', $file)\\n\\t\\t\\t\\t\\t\\t\\t? \'<link rel=\\"stylesheet\\" href=\\"\' . $file . \'\\" type=\\"text\\/css\\" \\/>\'\\n\\t\\t\\t\\t\\t\\t\\t: \'<script type=\\"text\\/javascript\\" src=\\"\' . $file . \'\\"><\\/script>\';\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (!empty($excluded[$type][\'html\'])) {\\n\\t\\t\\t\\t\\t$value[] = implode(\\"\\\\n\\", $excluded[$type][\'html\']);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tunset($value);\\n\\n\\t\\t\\t\\/\\/ Replace tags in web page\\n\\t\\t\\t$modx->resource->_output = str_replace(\\n\\t\\t\\t\\tarray($modx->getRegisteredClientStartupScripts() . \\"\\\\n<\\/head>\\", $modx->getRegisteredClientScripts() . \\"\\\\n<\\/body>\\"),\\n\\t\\t\\t\\tarray(implode(\\"\\\\n\\", $final[\'head\']) . \\"\\\\n<\\/head>\\", implode(\\"\\\\n\\", $final[\'body\']) . \\"\\\\n<\\/body>\\"),\\n\\t\\t\\t\\t$modx->resource->_output\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\t\\/\\/ Process images\\n\\t\\tif ($modx->getOption(\'minifyx_process_images\', null, false, true)) {\\n\\t\\t\\tif (!$modx->getService(\'minifyx\',\'MinifyX\', MODX_CORE_PATH.\'components\\/minifyx\\/model\\/minifyx\\/\')) {return false;}\\n\\n\\t\\t\\t$connector = $modx->getOption(\'minifyx_connector\', null, \'\\/assets\\/components\\/minifyx\\/munee.php\', true);\\n\\t\\t\\t$exclude = $modx->getOption(\'minifyx_exclude_images\');\\n\\t\\t\\t$replace = array(\'from\' => array(), \'to\' => array());\\n\\t\\t\\t$site_url = $modx->getOption(\'site_url\');\\n\\t\\t\\t$default = $modx->getOption(\'minifyx_images_filters\', null, \'\', true);\\n\\n\\t\\t\\tpreg_match_all(\'\\/<img.*?>\\/i\', $modx->resource->_output, $tags);\\n\\t\\t\\tforeach ($tags[0] as $tag) {\\n\\t\\t\\t\\tif (preg_match($exclude, $tag)) {\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telseif (preg_match_all(\'\\/(src|height|width|filters)=[\\\\\'|\\"](.*?)[\\\\\'|\\"]\\/i\', $tag, $properties)) {\\n\\t\\t\\t\\t\\tif (count($properties[0]) >= 2) {\\n\\t\\t\\t\\t\\t\\t$file = $connector . \'?files=\';\\n\\t\\t\\t\\t\\t\\t$resize = \'\';\\n\\t\\t\\t\\t\\t\\t$filters = \'\';\\n\\t\\t\\t\\t\\t\\t$tmp = array(\'from\' => array(), \'to\' => array());\\n\\n\\t\\t\\t\\t\\t\\tforeach ($properties[1] as $k => $v) {\\n\\t\\t\\t\\t\\t\\t\\tif ($v == \'src\') {\\n\\t\\t\\t\\t\\t\\t\\t\\t$src = $properties[2][$k];\\n\\t\\t\\t\\t\\t\\t\\t\\tif (strpos($src, \':\\/\\/\') !== false) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (strpos($src, $site_url) !== false) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t$src = str_replace($site_url, \'\', $src);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\/\\/ Image from 3rd party domain\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t$file .= $src;\\n\\t\\t\\t\\t\\t\\t\\t\\t$tmp[\'from\'][\'src\'] = $properties[2][$k];\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\telseif ($v == \'height\' || $v == \'width\') {\\n\\t\\t\\t\\t\\t\\t\\t\\t$resize .=  $v[0] . \'[\'.$properties[2][$k].\']\';\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\telseif ($v == \'filters\') {\\n\\t\\t\\t\\t\\t\\t\\t\\t$filters .= $properties[2][$k];\\n\\t\\t\\t\\t\\t\\t\\t\\t$tmp[\'from\'][\'filters\'] = $properties[0][$k];\\n\\t\\t\\t\\t\\t\\t\\t\\t$tmp[\'to\'][\'filters\'] = \'\';\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\tif (!empty($tmp[\'from\'][\'src\'])) {\\n\\t\\t\\t\\t\\t\\t\\t$resize .= isset($tmp[\'from\'][\'filters\'])\\n\\t\\t\\t\\t\\t\\t\\t\\t? $filters\\n\\t\\t\\t\\t\\t\\t\\t\\t: $default;\\n\\t\\t\\t\\t\\t\\t\\t$tmp[\'to\'][\'src\'] = $file . \'?resize=\' . $resize;\\n\\n\\t\\t\\t\\t\\t\\t\\tksort($tmp[\'from\']);\\n\\t\\t\\t\\t\\t\\t\\tksort($tmp[\'to\']);\\n\\n\\t\\t\\t\\t\\t\\t\\t$replace[\'from\'][] = $tag;\\n\\t\\t\\t\\t\\t\\t\\t$replace[\'to\'][] = str_replace($tmp[\'from\'], $tmp[\'to\'], $tag);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!empty($replace)) {\\n\\t\\t\\t\\t$modx->resource->_output = str_replace(\\n\\t\\t\\t\\t\\t$replace[\'from\'],\\n\\t\\t\\t\\t\\t$replace[\'to\'],\\n\\t\\t\\t\\t\\t$modx->resource->_output\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t$modx->log(modX::LOG_LEVEL_INFO, \'[MinifyX] Total time for page \\"\'.$modx->resource->id.\'\\" = \'.(microtime(true) - $time));\\n\\t\\tbreak;\\n}"}',
        'guid' => 'baaf7fa2f5bd9ee0533d71f2c64b1145',
        'native_key' => NULL,
        'signature' => '699ad0c1b3c778fe46e36e347d03c4c3',
        'related_objects' => 
        array (
          'PluginEvents' => 
          array (
            '1f611d4f4d4a629e412dd00f8a455553' => 
            array (
              'preserve_keys' => true,
              'update_object' => true,
              'unique_key' => 
              array (
                0 => 'pluginid',
                1 => 'event',
              ),
              'class' => 'modPluginEvent',
              'object' => '{"pluginid":0,"event":"OnWebPagePrerender","priority":0,"propertyset":0}',
              'guid' => '3ee812472a2b4e331a611803170d695d',
              'native_key' => 
              array (
                0 => 0,
                1 => 'OnWebPagePrerender',
              ),
              'signature' => '17239160328016838f1041ff61b4275e',
            ),
            '10954a6ce3f0b08e7ef87d58209d81c1' => 
            array (
              'preserve_keys' => true,
              'update_object' => true,
              'unique_key' => 
              array (
                0 => 'pluginid',
                1 => 'event',
              ),
              'class' => 'modPluginEvent',
              'object' => '{"pluginid":0,"event":"OnSiteRefresh","priority":0,"propertyset":0}',
              'guid' => '0eec9e12e5d05184fd096b2d6d149c96',
              'native_key' => 
              array (
                0 => 0,
                1 => 'OnSiteRefresh',
              ),
              'signature' => 'e0ddec681466ef047114955320572cf9',
            ),
          ),
        ),
      ),
    ),
  ),
  'related_object_attributes' => 
  array (
    'Snippets' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
    'Plugins' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
    'PluginEvents' => 
    array (
      'preserve_keys' => true,
      'update_object' => true,
      'unique_key' => 
      array (
        0 => 'pluginid',
        1 => 'event',
      ),
    ),
  ),
  'namespace' => 'minifyx',
  'resolve' => 
  array (
    0 => 
    array (
      'type' => 'file',
      'body' => '{"source":"minifyx-1.4.4-pl\\/modCategory\\/869b815aa7af9da3e4623a0320b6b275\\/0\\/","target":"return MODX_ASSETS_PATH . \'components\\/\';","name":"minifyx"}',
    ),
    1 => 
    array (
      'type' => 'file',
      'body' => '{"source":"minifyx-1.4.4-pl\\/modCategory\\/869b815aa7af9da3e4623a0320b6b275\\/1\\/","target":"return MODX_CORE_PATH . \'components\\/\';","name":"minifyx"}',
    ),
    2 => 
    array (
      'type' => 'php',
      'body' => '{"source":"minifyx-1.4.4-pl\\/modCategory\\/869b815aa7af9da3e4623a0320b6b275.resolve.files.resolver","type":"php","name":"resolve.files"}',
    ),
  ),
  'validate' => NULL,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => 'd32c7f0d1c3e49e821571e734d2e468d',
  'package' => 'modx',
  'class' => 'modCategory',
  'signature' => '869b815aa7af9da3e4623a0320b6b275',
  'native_key' => NULL,
  'object' => '{"id":null,"parent":0,"category":"MinifyX","rank":0}',
);